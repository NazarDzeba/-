#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <locale>
#include <sstream>
#include <limits>
using namespace std;
class Tester {
private:
    string product;
    string firstName;
    string lastName;
public:
    Tester(const string& product, const string& firstName, const string& lastName) {
        this->product = product;
        this->firstName = firstName;
        this->lastName = lastName;
    }
    string getProduct() const {
        return product;
    }
    string getFirstName() const {
        return firstName;
    }
    string getLastName() const {
        return lastName;
    }
};
class Equipment {
private:
    string nameOfEquipment;
public:
    Equipment(string name){
        this->nameOfEquipment = name;
    }
    string getNameOfEquipment() const {
        return nameOfEquipment;
    }
};
class Product {
private:
    vector<Tester*> testers;
    vector<Tester*> products;
    vector<Equipment*> equipments;
public:
    string name = "";
    Product(string name) {
        this->name = name;
    }
    void addTester(Tester* tester) {
        testers.push_back(tester);
    }
        void addEquipment(Equipment* equipment){
        equipments.push_back(equipment);
    }
    void printTesters() const {
        cout << "\nProduct: " << name << endl;
        for (const Tester* product : products) {
            cout << product->getProduct() << " - ";
        }
        cout << "Testers:" << endl;
        for (const Tester* tester : testers) {
            cout << tester->getFirstName() << " ";
            cout << tester->getLastName() << endl;
        }
    }
    void printEquipment() const {
    cout << "\nProduct: " << name << endl;
        for (const Tester* product : products) {
            cout << product->getProduct() << " - ";
        }
        cout << "Equipment:" << endl;
        for (const Equipment* equipment : equipments) {
            cout << equipment->getNameOfEquipment() <<  endl;
        }
    }
};
class Category {
public:
    string nothing = "";
    string equipment;
    string name = "";
    vector<Product> products;
    vector<Product> productsLaboratory;
    Category(string name) {
        this->name = name;
    }
    Category(string equipment, string nothing){
    this->equipment = equipment;
    this->nothing = nothing;
    }
    void addProduct(Product product) {
    products.push_back(product);
    }
    void printTesters() const {
        cout << "\nTesters of the category " << name << ":";
        for (const Product& product : products) {
            product.printTesters();
        }
    }
    void printEquipment() const {
        cout << "\nEquipment of the category " << name << ":";
        for (const Product& product : products) {
            product.printEquipment();
        }
    }
};
class Database {
public:
    vector<Category> categories;
    void printProductsOfFactory() {
        cout << "List of all categories and products of the enterprise:";
        for (int i = 0; i < categories.size(); i++) {
            cout << "\n" << categories[i].name << ":\t";
            for (int j = 0; j < categories[i].products.size(); j++) {
                cout << categories[i].products[j].name << "\t";
            }
        }
    }
    void printProductsOfFactoryAtThisMoment() {
        cout << "A list of all categories and products of the enterprise that are currently being assembled:";
        for (int i = 0; i < categories.size(); i++) {
            cout << "\n" << categories[i].name << ":\t";
            for (int j = 0; j < categories[i].products.size() - 2; j++) {
                cout << categories[i].products[j].name << "\t";
            }
        }
    }
    void printProductsOfDepartament1() {
        cout << "List of all categories and products of department 1:\n";
        cout << "Category " << categories[1].name << ":\t";
            for (int i = 0; i < categories[1].products.size(); i++) {
                cout << categories[1].products[i].name << "\t";
            }
            cout << endl;
            cout << "Category " << categories[5].name << ":\t";
            for (int i = 0; i < categories[5].products.size(); i++) {
                cout << categories[5].products[i].name << "\t";
            }
        }
        void printProductsOfDepartament2() {
        cout << "List of all categories and products of department 2:\n";
        cout << "Category " << categories[2].name << ":\t";
            for (int i = 0; i < categories[2].products.size(); i++) {
                cout << categories[2].products[i].name << "\t";
            }
            cout << endl;
            cout << "Category " << categories[3].name << ":\t";
            for (int i = 0; i < categories[3].products.size(); i++) {
                cout << categories[3].products[i].name << "\t";
            }
        }
        void printProductsOfDepartament3() {
        cout << "List of all categories and products of department 3:\n";
        cout << "Category " << categories[4].name << ":\t";
            for (int i = 0; i < categories[4].products.size(); i++) {
                cout << categories[4].products[i].name << "\t";
            }
            cout << endl;
            cout << "Category " << categories[0].name << ":\t";
            for (int i = 0; i < categories[0].products.size(); i++) {
                cout << categories[0].products[i].name << "\t";
            }
        }
    void printProductsOfDepartament1AtThisMoment() {
        cout << "A list of all categories and products of the department 1 that are currently being assembled:\n";
        cout << "Category " << categories[1].name << ":\t";
        for (int i = 0; i < categories[1].products.size() - 2; i++) {
            cout << categories[1].products[i].name << "\t";
        }
        cout << endl;
        cout << "Category " << categories[5].name << ":\t";
        for (int i = 0; i < categories[5].products.size() - 2; i++) {
            cout << categories[5].products[i].name << "\t";
        }
    }
    void printProductsOfDepartament2AtThisMoment() {
        cout << "A list of all categories and products of the department 2 that are currently being assembled:\n";
        cout << "Category " << categories[2].name << ":\t";
        for (int i = 0; i < categories[2].products.size() - 2; i++) {
            cout << categories[2].products[i].name << "\t";
        }
        cout << endl;
        cout << "Category " << categories[3].name << ":\t";
        for (int i = 0; i < categories[3].products.size() - 2; i++) {
            cout << categories[3].products[i].name << "\t";
        }
    }
    void printProductsOfDepartament3AtThisMoment() {
        cout << "A list of all categories and products of the department 3 that are currently being assembled:\n";
        cout << "Category " << categories[4].name << ":\t";
        for (int i = 0; i < categories[4].products.size() - 2; i++) {
            cout << categories[4].products[i].name << "\t";
        }
        cout << endl;
        cout << "Category " << categories[0].name << ":\t";
        for (int i = 0; i < categories[0].products.size() - 2; i++) {
            cout << categories[0].products[i].name << "\t";
        }
    }
    void printProductsOfRegion1AtThisMoment() {
        cout << "A list of all categories and products of the region 1 that are currently being assembled:\n";
        cout << "Category " << categories[1].name << ":\t";
        for (int i = 0; i < categories[1].products.size() - 4; i++) {
            cout << categories[1].products[i].name << "\t";
        }
        cout << endl;
        cout << "Category " << categories[5].name << ":\t";
        for (int i = 0; i < categories[5].products.size() - 5; i++) {
            cout << categories[5].products[i].name << "\t";
        }
    }
    void printProductsOfRegion2AtThisMoment() {
        cout << "A list of all categories and products of the region 2 that are currently being assembled:\n";
        cout << "Category " << categories[1].name << ":\t";
        for (int i = 2; i < categories[1].products.size() - 2; i++) {
            cout << categories[1].products[i].name << "\t";
        }
        cout << endl;
        cout << "Category " << categories[5].name << ":\t";
        for (int i = 3; i < categories[5].products.size() - 2; i++) {
            cout << categories[5].products[i].name << "\t";
        }
    }
    void printProductsOfRegion3AtThisMoment() {
        cout << "A list of all categories and products of the region 3 that are currently being assembled:\n";
        cout << "Category " << categories[2].name << ":\t";
        for (int i = 0; i < categories[2].products.size() - 3; i++) {
            cout << categories[2].products[i].name << "\t";
        }
        cout << endl;
        cout << "Category " << categories[3].name << ":\t";
        for (int i = 0; i < categories[3].products.size() - 3; i++) {
            cout << categories[3].products[i].name << "\t";
        }
    }
    void printProductsOfRegion4AtThisMoment() {
        cout << "A list of all categories and products of the region 4 that are currently being assembled:\n";
        cout << "Category " << categories[2].name << ":\t";
        for (int i = 1; i < categories[2].products.size() - 2; i++) {
            cout << categories[2].products[i].name << "\t";
        }
        cout << endl;
        cout << "Category " << categories[3].name << ":\t";
        for (int i = 1; i < categories[3].products.size() - 2; i++) {
            cout << categories[3].products[i].name << "\t";
        }
    }
    void printProductsOfRegion5AtThisMoment() {
        cout << "A list of all categories and products of the region 5 that are currently being assembled:\n";
        cout << "Category " << categories[4].name << ":\t";
        for (int i = 0; i < categories[4].products.size() - 2; i++) {
            cout << categories[4].products[i].name << "\t";
        }
        cout << endl;
        cout << "Category " << categories[0].name << ":\t";
        for (int i = 0; i < categories[0].products.size() - 3; i++) {
            cout << categories[0].products[i].name << "\t";
        }
    }
    void printProductsOfRegion6AtThisMoment() {
        cout << "A list of all categories and products of the region 6 that are currently being assembled:\n";
        cout << "Category " << categories[4].name << ":\t";
        for (int i = 1; i < categories[4].products.size() - 2; i++) {
            cout << categories[4].products[i].name << "\t";
        }
        cout << endl;
        cout << "Category " << categories[0].name << ":\t";
        for (int i = 2; i < categories[0].products.size() - 2; i++) {
            cout << categories[0].products[i].name << "\t";
        }
    }
    void printCategoryOfFactoryByIndex() {
        int factoryIndex;
        do {
            cout << "Enter the category index (from 0 to 6), or -1 to end program): ";
            cin >> factoryIndex;
            if (factoryIndex == -1) {
                cout << "Work on the program has been completed\n";
                return;
            }
        } while (factoryIndex < 0 || factoryIndex >= categories.size());
        cout << "Category " << categories[factoryIndex].name << ":\t";
        for (int i = 0; i < categories[factoryIndex].products.size(); i++) {
            cout << categories[factoryIndex].products[i].name << "\t";
        }
    }
    void printCategoryOfFactoryByIndexAtThisMoment() {
        int factoryIndex;
        do {
            cout << "Enter a category index from 0 to 6 to get the products of the specified enterprise category currently being collected or enter -1 to exit: ";
            cin >> factoryIndex;
            if (factoryIndex == -1 || factoryIndex < -1 || factoryIndex > 5) {
                cout << "Work on the program has been completed\n";
                return;
            }
            else{
                cout << "Category " << categories[factoryIndex].name << ":\t";
        for (int i = 0; i < categories[factoryIndex].products.size() - 2; i++) {
            cout << categories[factoryIndex].products[i].name << "\t";
            }
            }
        } while (factoryIndex != -1);
    }
    void printCategoryOfDepartament1ByIndex() {
        cout << "Enter a category number of 0 or 1 to display a list of all products in that category: ";
    int categoryIndex;
    cin >> categoryIndex;
    switch (categoryIndex) {
        case 0:
            cout << "Category " << categories[1].name << ":\t";
            for (int i = 0; i < categories[1].products.size(); i++) {
                cout << categories[1].products[i].name << "\t";
            }
            break;
        case 1:
            cout << "Category " << categories[5].name << ":\t";
            for (int i = 0; i < categories[5].products.size(); i++) {
                cout << categories[5].products[i].name << "\t";
            }
            break;
        default:
            cout << "Invalid category number, enter category index 0 or 1\n";
            break;
    }
    }
    void printCategoryOfDepartament2ByIndex() {
        cout << "Enter a category number of 0 or 1 to display a list of all products in that category: ";
    int categoryIndex;
    cin >> categoryIndex;

    switch (categoryIndex) {
        case 0:
            cout << "Category " << categories[2].name << ":\t";
            for (int i = 0; i < categories[2].products.size(); i++) {
                cout << categories[2].products[i].name << "\t";
            }
            break;
        case 1:
            cout << "Category " << categories[3].name << ":\t";
            for (int i = 0; i < categories[3].products.size(); i++) {
                cout << categories[3].products[i].name << "\t";
            }
            break;
        default:
            cout << "Invalid category number, enter category index 0 or 1\n";
            break;
    }
    }
    void printCategoryOfDepartament3ByIndex() {
        cout << "Enter a category number of 0 or 1 to display a list of all products in that category: ";
    int categoryIndex;
    cin >> categoryIndex;
    switch (categoryIndex) {
        case 0:
            cout << "Category " << categories[4].name << ":\t";
            for (int i = 0; i < categories[4].products.size(); i++) {
                cout << categories[4].products[i].name << "\t";
            }
            break;
        case 1:
            cout << "Category " << categories[5].name << ":\t";
            for (int i = 0; i < categories[5].products.size(); i++) {
                cout << categories[5].products[i].name << "\t";
            }
            break;
        default:
            cout << "Invalid category number, enter category index 0 or 1\n";
            break;
    }
    }
    void printCategoryOfDepartament1ByIndexAtThisMoment() {
        cout << "Enter a category number of 0 or 1 to display a list of all products in that category that are currently being assembled: ";
    int categoryIndex;
    cin >> categoryIndex;
    switch (categoryIndex) {
        case 0:
            cout << "Category " << categories[1].name << ":\t";
            for (int i = 0; i < categories[1].products.size() - 2; i++) {
                cout << categories[1].products[i].name << "\t";
            }
            break;
        case 1:
            cout << "Category " << categories[5].name << ":\t";
            for (int i = 0; i < categories[5].products.size() - 2; i++) {
                cout << categories[5].products[i].name << "\t";
            }
            break;
        default:
            cout << "Invalid category number, enter category index 0 or 1\n";
            break;
    }
    }
    void printCategoryOfDepartament2ByIndexAtThisMoment() {
        cout << "Enter a category number of 0 or 1 to display a list of all products in that category that are currently being assembled: ";
    int categoryIndex;
    cin >> categoryIndex;
    switch (categoryIndex) {
        case 0:
            cout << "Category " << categories[2].name << ":\t";
            for (int i = 0; i < categories[2].products.size() - 2; i++) {
                cout << categories[2].products[i].name << "\t";
            }
            break;
        case 1:
            cout << "Category " << categories[3].name << ":\t";
            for (int i = 0; i < categories[3].products.size() - 2; i++) {
                cout << categories[3].products[i].name << "\t";
            }
            break;
        default:
            cout << "Invalid category number, enter category index 0 or 1\n";
            break;
    }
    }
    void printCategoryOfDepartament3ByIndexAtThisMoment() {
        cout << "Enter a category number of 0 or 1 to display a list of all products in that category that are currently being assembled: ";
    int categoryIndex;
    cin >> categoryIndex;
    switch (categoryIndex) {
        case 0:
            cout << "Category " << categories[4].name << ":\t";
            for (int i = 0; i < categories[4].products.size() - 2; i++) {
                cout << categories[4].products[i].name << "\t";
            }
            break;
        case 1:
            cout << "Category " << categories[0].name << ":\t";
            for (int i = 0; i < categories[0].products.size() - 2; i++) {
                cout << categories[0].products[i].name << "\t";
            }
            break;
        default:
            cout << "Invalid category number, enter category index 0 or 1\n";
            break;
    }
    }
};
class ProductByDate {
private:
    string name;
    string category;
public:
    ProductByDate(string name, string category) {
        this->name = name;
        this->category = category;
    }
    string getName() {
        return name;
    }
    string getCategory() {
        return category;
    }
};
class Region {
public:
    vector<ProductByDate> products;
    vector<Product> productss;
    string name;
    void addProduct(ProductByDate product) {
         products.push_back(product);
    }
    void addProduct2(const Product& product) {
        productss.push_back(product);
    }
    vector<ProductByDate> getProducts() {
         return products;
    }
    const vector<Product>& getProducts() const {
        return productss;
    }
    Region() {}
    Region(const string& regionName) {
        name = regionName;
    }
};
class Departament {
private:
    vector<ProductByDate> products;
public:
    string name;
    vector<Region> regions;
    void addProduct(ProductByDate product) {
        products.push_back(product);
    }
    void addProduct2(const Product& product) {
        for (size_t i = 0; i < regions.size(); ++i) {
            regions[i].addProduct2(product);
        }
    }
    vector<ProductByDate> getProducts() {
        return products;
    }
    const vector<Product>& getProducts() const {
        static vector<Product> allProducts;
        allProducts.clear();
        for (size_t i = 0; i < regions.size(); ++i) {
            const vector<Product>& regionProducts = regions[i].getProducts();
            allProducts.insert(allProducts.end(), regionProducts.begin(), regionProducts.end());
        }
        return allProducts;
    }
    Departament(){}
    Departament(const string& departamentName, const vector<Region>& departamentRegions) {
        name = departamentName;
        regions = departamentRegions;
    }
};
class Factory {
private:
    vector<ProductByDate> products;
    vector<ProductByDate> productsLaboratory;
    vector<ProductByDate> productsLaboratory1;
    vector<ProductByDate> productsLaboratory2;
    vector<ProductByDate> productsLaboratory3;
    vector<ProductByDate> productsLaboratory4;
    vector<ProductByDate> productsLaboratory5;
    vector<ProductByDate> productsLaboratory6;
public:
    vector<Departament> departamentss;
    void addProduct(ProductByDate product) {
        products.push_back(product);
    }
    void addProduct2(const Product& product) {
        for (size_t i = 0; i < departamentss.size(); ++i) {
            departamentss[i].addProduct2(product);
        }
    }
    vector<Product> getProducts() const {
        vector<Product> allProducts;
        for (size_t i = 0; i < departamentss.size(); ++i) {
            vector<Product> departamentProducts = departamentss[i].getProducts();
            allProducts.insert(allProducts.end(), departamentProducts.begin(), departamentProducts.end());
        }
        return allProducts;
    }
    void addProductLaboratories(ProductByDate product) {
        productsLaboratory.push_back(product);
    }
    void addProductLaboratory1(ProductByDate product) {
        productsLaboratory1.push_back(product);
    }
    void addProductLaboratory2(ProductByDate product) {
        productsLaboratory2.push_back(product);
    }
    void addProductLaboratory3(ProductByDate product) {
        productsLaboratory3.push_back(product);
    }
    void addProductLaboratory4(ProductByDate product) {
        productsLaboratory4.push_back(product);
    }
    void addProductLaboratory5(ProductByDate product) {
        productsLaboratory5.push_back(product);
    }
    void addProductLaboratory6(ProductByDate product) {
        productsLaboratory6.push_back(product);
    }
    vector<ProductByDate> getProducts() {
        return products;
    }
    vector<ProductByDate> getProductsLaboratories() {
        return productsLaboratory;
    }
    vector<ProductByDate> getProductsLaboratory1() {
        return productsLaboratory1;
    }
    vector<ProductByDate> getProductsLaboratory2() {
        return productsLaboratory2;
    }
    vector<ProductByDate> getProductsLaboratory3() {
        return productsLaboratory3;
    }
    vector<ProductByDate> getProductsLaboratory4() {
        return productsLaboratory4;
    }
    vector<ProductByDate> getProductsLaboratory5() {
        return productsLaboratory5;
    }
    vector<ProductByDate> getProductsLaboratory6() {
        return productsLaboratory6;
    }
};
class Employee {
    string name;
    string surname;
    string position;
public:
    string firstName;
    string lastName;
    Employee(const string& name, const string& surname, const string& position){
    this->name = name;
    this->surname = surname;
    this->position = position;
    }
    void displayInfo() const {
        cout << "Name, surname, position: " << name << " " << surname << ", " << position << endl;
    }
    Employee(const string& name, const string& surname) {
    firstName = name;
    lastName = surname;
    }
};
class RegionChief : public Employee {
public:
    Region region;
    RegionChief(const string& first, const string& last, const Region& reg) : Employee(first, last) {
        region = reg;
    }
};
class CategoryProduct{
protected:
    string nameOfCategory;
    vector<string> workList;
public:
    CategoryProduct(string catName) {
        this->nameOfCategory = catName;
    }
    void addWork(const string& work) {
        workList.push_back(work);
    }
    void displayWorkList() const {
        cout << "Work performed on the product " << nameOfCategory << ":" << endl;
        for (size_t i = 0; i < workList.size(); ++i) {
            cout << "- " << workList[i] << endl;
        }
    }
};
class WorkersOfBrigade {
protected:
    string name;
public:
    string position;
    WorkersOfBrigade(const string& name) {
        this->name = name;
    }
    WorkersOfBrigade(const string& name, const string& position) {
        this->name = name;
        this->position = position;
    }
    virtual void printInfo() const {
        cout << "Worker: " << name << " (Position: " << position << ")" << endl;
    }
};
class Laborer : public WorkersOfBrigade {
public:
    Laborer(const string& name, const string& position)
        : WorkersOfBrigade(name, position) {
    }
    void printInfo() const override {
        cout << "Worker: " << name << " (Position: " << position << ")" << endl;
    }
};
class Brigade {
private:
    string nameOfBrigade;
    vector<WorkersOfBrigade*> workersOfBrigade;
public:
    Brigade(const string& name) {
        this->nameOfBrigade = name;
    }
    string getName() const {
        return nameOfBrigade;
    }
    void addWorkerToBrigade(WorkersOfBrigade* worker) {
        workersOfBrigade.push_back(worker);
    }
    void printInfo() const {
        cout << "Composition of the brigade " << nameOfBrigade << ":" << endl;
        for (size_t i = 0; i < workersOfBrigade.size(); ++i) {
            workersOfBrigade[i]->printInfo();
        }
    }
    vector<WorkersOfBrigade*> getMastersOfDepartment() const {
        vector<WorkersOfBrigade*> mastersOfDepartmant;
        for (size_t i = 0; i < workersOfBrigade.size(); ++i) {
            if (workersOfBrigade[i]->position == "assembler") {
                mastersOfDepartmant.push_back(workersOfBrigade[i]);
            }
        }
        return mastersOfDepartmant;
    }
    vector<WorkersOfBrigade*> getMastersOfRegion() const {
        vector<WorkersOfBrigade*> mastersOfRegion;
        for (size_t i = 0; i < workersOfBrigade.size() - 1; ++i) {
            if (workersOfBrigade[i]->position == "assembler") {
                mastersOfRegion.push_back(workersOfBrigade[i]);
            }
        }
        return mastersOfRegion;
    }
};
class BrigadeOfDepartment {
private:
    string nameOfDepartment;
    vector<Brigade*> brigades;
public:
    BrigadeOfDepartment(const string& name) {
        this->nameOfDepartment = name;
    }
    void addBrigade(Brigade* brigade) {
        brigades.push_back(brigade);
    }
    string getName() const {
        return nameOfDepartment;
    }
    void printInfo() const {
        cout << "Department: " << nameOfDepartment << endl;
        if (brigades.empty()) {
            cout << "Brigades are not assigned." << endl;
        } else {
            for (size_t i = 0; i < brigades.size(); ++i) {
                brigades[i]->printInfo();
            }
    cout << "\n\n";
    cout << "Masters  of Department 1:" << endl;
    for (size_t i = 0; i < brigades.size() - 1; ++i) {
        vector<WorkersOfBrigade*> mastersOfRegion = brigades[i]->getMastersOfRegion();
        for (size_t j = 0; j < mastersOfRegion.size(); ++j) {
            mastersOfRegion[j]->printInfo();
        }
    }
}
}
};
class Enterprise {
private:
vector<BrigadeOfDepartment*> departments;
public:
void addDepartment(BrigadeOfDepartment* department) {
departments.push_back(department);
}
void printDepartmentBrigade(const string& departmentName) const {
    for (size_t i = 0; i < departments.size(); ++i) {
        if (departments[i]->getName() == departmentName) {
            departments[i]->printInfo();
            return;
        }
    }
    cout << "Department not found." << endl;
}
void printDepartmentBrigades() const {
    for (size_t i = 0; i < departments.size(); ++i) {
        departments[i]->printInfo();
        cout << endl;
    }
}
};
class Laboratory{
private:
    string laboratoryName;
    vector<Laboratory> laboratories;
    vector<Category> categories;
public:
    void addLaboratory(const string& laboratoryName){
        Laboratory laboratory;
        laboratory.laboratoryName = laboratoryName;
        laboratories.push_back(laboratory);
    }
    string getName() const {
        return laboratoryName;
    }
    void printLaboratory(const string& laboratoryName) const {
    for (size_t i = 0; i < laboratories.size(); ++i) {
        if (laboratories[i].getName() == laboratoryName) {
            return;
        }
    }
    cout << "No testing laboratory found." << endl;
    }
    void cat1(){
        cout << laboratories[0].getName() << "\n" << laboratories[5].getName() << endl;
    }
    void cat2(){
        cout << laboratories[1].getName() << "\n" << laboratories[2].getName() << "\n" << laboratories[4].getName() << endl;
    }
    void cat3(){
        cout << laboratories[3].getName() << endl;
    }
    void cat4(){
        cout << laboratories[4].getName() << "\n" << laboratories[5].getName() << endl;
    }
    void cat5(){
        cout << laboratories[0].getName() << "\n" << laboratories[2].getName() << endl;
    }
    void cat6(){
        cout << laboratories[1].getName() << "\n" << laboratories[4].getName() << endl;
    }
    void addCategory(Category category) {
        categories.push_back(category);
    }
    void printTesters() const {
        cout << "Testers for the laboratory:" << endl;
        for (const Category category : categories) {
            category.printTesters();
        }
    }
};
void printAllProducts(vector<ProductByDate> products) {
    for (int i = 0; i < products.size(); i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
    }
}
void printAllProductsForJanuary(vector<ProductByDate> products){
    for (int i = 0; i < products.size() - 56; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
    }
}
void printAllProductsForFebruary(vector<ProductByDate> products){
    for (int i = 11; i < products.size() - 40; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
    }
}
void printAllProductsForMarch(vector<ProductByDate> products){
    for (int i = 27; i < products.size() - 32; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
    }
}
void printAllProductsForApril(vector<ProductByDate> products){
    for (int i = 35; i < products.size() - 23; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
    }
}
void printAllProductsForMay(vector<ProductByDate> products){
    for (int i = 44; i < products.size() - 15; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
    }
}
void printAllProductsForJune(vector<ProductByDate> products){
    for (int i = 52; i < products.size(); i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
    }
}
void printAllProductsAndCountForJanuary(vector<ProductByDate> products){
    int counter;
    for (int i = 0; i < products.size() - 56; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products collected by the enterprise in January: " << counter - 1 << endl;
}
void printAllProductsAndCountForFebruary(vector<ProductByDate> products){
    int counter;
    for (int i = 11; i < products.size() - 40; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products collected by the enterprise in February: " << counter - 1 << endl;
}
void printAllProductsAndCountForMarch(vector<ProductByDate> products){
    int counter;
    for (int i = 27; i < products.size() - 32; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products collected by the enterprise in March: " << counter - 1 << endl;
}
void printAllProductsAndCountForApril(vector<ProductByDate> products){
    int counter;
    for (int i = 35; i < products.size() - 23; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products collected by the enterprise in April: " << counter - 1 << endl;
}
void printAllProductsAndCountForMay(vector<ProductByDate> products){
    int counter;
    for (int i = 44; i < products.size() - 15; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products collected by the enterprise in May: " << counter - 1 << endl;
}
void printAllProductsAndCountForJune(vector<ProductByDate> products){
    int counter;
    for (int i = 52; i < products.size(); i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products collected by the enterprise in June: " << counter - 1 << endl;
}
void printAllProductsLaboratories(vector<ProductByDate> productsLaboratories) {
    for (int i = 0; i < productsLaboratories.size(); i++) {
        cout << productsLaboratories[i].getCategory() << productsLaboratories[i].getName() << "  ";
    }
}
void printProductsAndCountByDepartament1ForJanuary(vector<ProductByDate> products) {
    int counter;
    cout << "List of all products of the department 1 for January: " << endl;
    for (int i = 0; i < 5; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products collected by the department 1 in June: " << counter - 1 << endl;
}
void printProductsAndCountByDepartament2ForJanuary(vector<ProductByDate> products) {
    int counter;
    cout << "List of all products of the department 2 for January: " << endl;
    for (int i = 5; i < 8; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products collected by the department 1 in June: " << counter << endl;
}
void printProductsAndCountByDepartament3ForJanuary(vector<ProductByDate> products) {
    int counter;
    cout << "List of all products of the department 3 for January: " << endl;
    for (int i = 8; i < 11; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products collected by the department 1 in June: " << counter << endl;
}
void printProductsAndCountByDepartament1ForFebruary(vector<ProductByDate> products) {
    int counter;
    cout << "List of all products of the department 1 for February: " << endl;
    for (int i = 11; i < 17; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products collected by the department 1 in June: " << counter - 1 << endl;
}
void printProductsAndCountByDepartament2ForFebruary(vector<ProductByDate> products) {
    int counter;
    cout << "List of all products of the department 2 for February: " << endl;
    for (int i = 17; i < 22; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products collected by the department 1 in June: " << counter << endl;
}
void printProductsAndCountByDepartament3ForFebruary(vector<ProductByDate> products) {
    int counter;
    cout << "List of all products of the department 3 for February: " << endl;
    for (int i = 22; i < 27; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products collected by the department 1 in June: " << counter << endl;
}
void printProductsAndCountByDepartament1ForMarch(vector<ProductByDate> products) {
    int counter;
    cout << "List of all products of the department 1 for March: " << endl;
    for (int i = 27; i < 31; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products collected by the department 1 in June: " << counter - 1 << endl;
}
void printProductsAndCountByDepartament2ForMarch(vector<ProductByDate> products) {
    int counter;
    cout << "List of all products of the department 2 for March: " << endl;
    for (int i = 31; i < 33; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products collected by the department 1 in June: " << counter << endl;
}
void printProductsAndCountByDepartament3ForMarch(vector<ProductByDate> products) {
    int counter;
    cout << "List of all products of the department 3 for March: " << endl;
    for (int i = 33; i < 35; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products collected by the department 1 in June: " << counter << endl;
}
void printProductsAndCountByDepartament1ForApril(vector<ProductByDate> products) {
    int counter;
    cout << "List of all products of the department 1 for April: " << endl;
    for (int i = 35; i < 39; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products collected by the department 1 in June: " << counter - 1 << endl;
}
void printProductsAndCountByDepartament2ForApril(vector<ProductByDate> products) {
    int counter;
    cout << "List of all products of the department 2 for April: " << endl;
    for (int i = 39; i < 42; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products collected by the department 1 in June: " << counter << endl;
}
void printProductsAndCountByDepartament3ForApril(vector<ProductByDate> products) {
    int counter;
    cout << "List of all products of the department 3 for April: " << endl;
    for (int i = 42; i < 44; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products collected by the department 1 in June: " << counter << endl;
}
void printProductsAndCountByDepartament1ForMay(vector<ProductByDate> products) {
    int counter;
    cout << "List of all products of the department 1 for May: " << endl;
    for (int i = 44; i < 48; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products collected by the department 1 in June: " << counter - 1 << endl;
}
void printProductsAndCountByDepartament2ForMay(vector<ProductByDate> products) {
    int counter;
    cout << "List of all products of the department 2 for May: " << endl;
    for (int i = 48; i < 50; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products collected by the department 1 in June: " << counter << endl;
}
void printProductsAndCountByDepartament3ForMay(vector<ProductByDate> products) {
    int counter;
    cout << "List of all products of the department 3 for May: " << endl;
    for (int i = 50; i < 52; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products collected by the department 1 in June: " << counter << endl;
}
void printProductsAndCountByDepartament1ForJune(vector<ProductByDate> products) {
    int counter;
    cout << "List of all products of the department 1 for June: " << endl;
    for (int i = 52; i < 58; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products collected by the department 1 in June: " << counter - 1 << endl;
}
void printProductsAndCountByDepartament2ForJune(vector<ProductByDate> products) {
    int counter;
    cout << "List of all products of the department 2 for June: " << endl;
    for (int i = 58; i < 63; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products collected by the department 1 in June: " << counter << endl;
}
void printProductsAndCountByDepartament3ForJune(vector<ProductByDate> products) {
    int counter;
    cout << "List of all products of the department 3 for June: " << endl;
    for (int i = 63; i < 67; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products collected by the department 1 in June: " << counter << endl;
}
void printProductsAndCountByRegion(vector<ProductByDate> products) {
    cout << "Products that have passed through the section of the specified Department in a certain period of time:" << endl;
    for (int i = 0; i < products.size(); i++) {
        cout << products[i].getName() << "  ";
    }
}
void printProductsAndCountByRegion1ForJanuary(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 1 of the specified Department in January:" << endl;
    for (int i = 0; i < 4; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 1 of the specified workshop during a certain period of time: " << counter - 1 << endl;
}
void printProductsAndCountByRegion2ForJanuary(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 2 of the specified Department 1 in January:" << endl;
    for (int i = 4; i < 6; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 2 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion3ForJanuary(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 3 of the specified Department 2 in January:" << endl;
    for (int i = 6; i < 8; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 3 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion4ForJanuary(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 4 of the specified Department 2 in January:" << endl;
    for (int i = 8; i < 9; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 4 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion5ForJanuary(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 5 of the specified Department 3 in January:" << endl;
    for (int i = 9; i < 10; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 5 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion6ForJanuary(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 6 of the specified Department 3 in January:" << endl;
    for (int i = 10; i < 11; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 6 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion1ForFebruary(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 1 of the specified Department 1 in February:" << endl;
    for (int i = 11; i < 15; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
        cout << "\nThe number of products that passed through the region 1 of the specified workshop during a certain period of time: " << counter - 1 << endl;
}
void printProductsAndCountByRegion2ForFebruary(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 2 of the specified Department 1 in February:" << endl;
    for (int i = 15; i < 17; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 2 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion3ForFebruary(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 3 of the specified Department 2 in February:" << endl;
    for (int i = 17; i < 20; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 3 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion4ForFebruary(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 4 of the specified Department 2 in February:" << endl;
    for (int i = 20; i < 22; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 4 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion5ForFebruary(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 5 of the specified Department 3 in February:" << endl;
    for (int i = 22; i < 25; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 5 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion6ForFebruary(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 6 of the specified Department 3 in February:" << endl;
    for (int i = 25; i < 27; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 6 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion1ForMarch(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 1 of the specified Department 1 in March:" << endl;
    for (int i = 27; i < 30; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 1 of the specified workshop during a certain period of time: " << counter - 1 << endl;
}
void printProductsAndCountByRegion2ForMarch(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 2 of the specified Department 1 in March:" << endl;
    for (int i = 30; i < 31; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 2 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion3ForMarch(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 3 of the specified Department 2 in March:" << endl;
    for (int i = 31; i < 32; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 3 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion4ForMarch(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 4 of the specified Department 2 in March:" << endl;
    for (int i = 32; i < 33; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 4 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion5ForMarch(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 5 of the specified Department 3 in March:" << endl;
    for (int i = 33; i < 34; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 5 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion6ForMarch(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 6 of the specified Department 3 in March:" << endl;
    for (int i = 34; i < 35; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 6 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion1ForApril(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 1 of the specified Department 1 in April:" << endl;
    for (int i = 35; i < 38; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 1 of the specified workshop during a certain period of time: " << counter - 1 << endl;
}
void printProductsAndCountByRegion2ForApril(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 2 of the specified Department 1 in April:" << endl;
    for (int i = 38; i < 39; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 2 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion3ForApril(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 3 of the specified Department 2 in April:" << endl;
    for (int i = 39; i < 41; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 3 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion4ForApril(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 4 of the specified Department 2 in April:" << endl;
    for (int i = 41; i < 42; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 4 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion5ForApril(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 5 of the specified Department 3 in April:" << endl;
    for (int i = 42; i < 43; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 5 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion6ForApril(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 6 of the specified Department 3 in April:" << endl;
    for (int i = 43; i < 44; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 6 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion1ForMay(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 1 of the specified Department 1 in May:" << endl;
    for (int i = 44; i < 47; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 1 of the specified workshop during a certain period of time: " << counter - 1 << endl;
}
void printProductsAndCountByRegion2ForMay(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 2 of the specified Department 1 in May:" << endl;
    for (int i = 47; i < 48; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 2 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion3ForMay(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 3 of the specified Department 2 in May:" << endl;
    for (int i = 48; i < 49; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 3 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion4ForMay(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 4 of the specified Department 2 in May:" << endl;
    for (int i = 49; i < 50; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 4 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion5ForMay(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 5 of the specified Department 3 in May:" << endl;
    for (int i = 50; i < 51; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 5 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion6ForMay(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 6 of the specified Department 3 in May:" << endl;
    for (int i = 51; i < 52; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 6 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion1ForJune(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 1 of the specified Department 1 in June:" << endl;
    for (int i = 52; i < 56; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 1 of the specified workshop during a certain period of time: " << counter - 1 << endl;
}
void printProductsAndCountByRegion2ForJune(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 2 of the specified Department 1 in June:" << endl;
    for (int i = 56; i < 58; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 2 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion3ForJune(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 3 of the specified Department 2 in June:" << endl;
    for (int i = 58; i < 61; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 3 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion4ForJune(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 4 of the specified Department 2 in June:" << endl;
    for (int i = 61; i < 63; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 4 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion5ForJune(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 5 of the specified Department 3 in June:" << endl;
    for (int i = 63; i < 65; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 5 of the specified workshop during a certain period of time: " << counter << endl;
}
void printProductsAndCountByRegion6ForJune(vector<ProductByDate> products) {
    int counter;
    cout << "\nProducts that passed through the region 6 of the specified Department 3 in June:" << endl;
    for (int i = 65; i < 67; i++) {
        cout << products[i].getCategory() << products[i].getName() << "  ";
        counter++;
    }
    cout << "\nThe number of products that passed through the region 6 of the specified workshop during a certain period of time: " << counter << endl;
}
string getCategoryByIndex(int index) {
    string category;
    switch (index) {
        case 0:
            category = "Trucks";
            break;
        case 1:
            category = "Cars";
            break;
        case 2:
            category = "Busses";
            break;
        case 3:
            category = "Agricultural Machinery";
            break;
        case 4:
            category = "Road-Construction machine";
            break;
        case 5:
            category = "Motorcycles";
            break;
        default:
            category = "Unknown";
            break;
    }
    return category;
}
void printCount(const vector<Product>& products) {
    cout << "Number of products: " << products.size() << endl;
}
void printCountInGeneral(const vector<Product>& products) {
    cout << "Number of products: " << products.size() + 2 << endl;
}
void printCountInGeneralForFactory(const vector<Product>& products) {
    cout << "Number of products: " << products.size() + 10 << endl;
}
void printProductss(const vector<Product>& products) {
    for (size_t i = 0; i < products.size(); ++i) {
        cout << products[i].name << endl;
    }
}
int main() {
    setlocale(LC_ALL, "");
    Database db;
    Factory factory;
    Departament departament;
    Region region;
    Category cat1("trucks");
    cat1.products.push_back(Product("Kamaz"));
    cat1.products.push_back(Product("MAN"));
    cat1.products.push_back(Product("Volvo"));
    cat1.products.push_back(Product("Ural"));
    cat1.products.push_back(Product("DAF"));
    Category cat2("cars");
    cat2.products.push_back(Product("Ford"));
    cat2.products.push_back(Product("Toyota"));
    cat2.products.push_back(Product("BMW"));
    cat2.products.push_back(Product("Dodge"));
    cat2.products.push_back(Product("Fiat"));
    cat2.products.push_back(Product("Audi"));
    Category cat3("buses");
    cat3.products.push_back(Product("Mercedes-Benz"));
    cat3.products.push_back(Product("Isuzu"));
    cat3.products.push_back(Product("Iris"));
    cat3.products.push_back(Product("Yutong"));
    Category cat4("agricultural machinery");
    cat4.products.push_back(Product("Challenger"));
    cat4.products.push_back(Product("Kubota"));
    cat4.products.push_back(Product("Claas"));
    cat4.products.push_back(Product("JCB"));
    Category cat5("road construction machines");
    cat5.products.push_back(Product("Caterpillar"));
    cat5.products.push_back(Product("Liebherr"));
    cat5.products.push_back(Product("Terex"));
    Category cat6("motorcycles");
    cat6.products.push_back(Product("Lifan"));
    cat6.products.push_back(Product("Honda"));
    cat6.products.push_back(Product("Geon"));
    cat6.products.push_back(Product("Yamaha"));
    cat6.products.push_back(Product("Kovi"));
    cat6.products.push_back(Product("Ducati"));
    cat6.products.push_back(Product("Suzuki"));
    cat6.products.push_back(Product("KTM"));
    db.categories.push_back(cat1);
    db.categories.push_back(cat2);
    db.categories.push_back(cat3);
    db.categories.push_back(cat4);
    db.categories.push_back(cat5);
    db.categories.push_back(cat6);
Enterprise enterprise;
BrigadeOfDepartment* department1 = new BrigadeOfDepartment("Department 1");
BrigadeOfDepartment* department2 = new BrigadeOfDepartment("Department 2");
BrigadeOfDepartment* department3 = new BrigadeOfDepartment("Department 3");
Brigade* brigade1 = new Brigade("Brigade 1");
brigade1->addWorkerToBrigade(new Laborer("Oleksandr Kovalenko", "foreman"));
brigade1->addWorkerToBrigade(new Laborer("Volodumyr Polyakov", "foreman"));
brigade1->addWorkerToBrigade(new Laborer("Andriy Kravchenko", "assembler"));
brigade1->addWorkerToBrigade(new Laborer("Vitaliy Morozov", "assembler"));
brigade1->addWorkerToBrigade(new Laborer("Vistan Rimaruk", "welder"));
brigade1->addWorkerToBrigade(new Laborer("Mstybog Baklan", "welder"));
brigade1->addWorkerToBrigade(new Laborer("Ioann Bilostotsky", "welder"));
brigade1->addWorkerToBrigade(new Laborer("Starodum Omelyanenko", "locksmith"));
brigade1->addWorkerToBrigade(new Laborer("Shchek Monastyrtsky", "locksmith"));
brigade1->addWorkerToBrigade(new Laborer("Por Petruk", "locksmith"));
brigade1->addWorkerToBrigade(new Laborer("Kalenyk Marenich", "locksmith"));
brigade1->addWorkerToBrigade(new Laborer("Illiya Yuzvenko", "locksmith"));
brigade1->addWorkerToBrigade(new Laborer("Ihor Sydorenko", "turner"));
brigade1->addWorkerToBrigade(new Laborer("Olexiy Kovalenko", "turner"));
Brigade* brigade2 = new Brigade("Brigade 2");
brigade2->addWorkerToBrigade(new Laborer("Serhiy Melnyk", "assembler"));
brigade2->addWorkerToBrigade(new Laborer("Victor Hrytsenko", "assembler"));
brigade2->addWorkerToBrigade(new Laborer("Mykhailo Bondarenko", "assembler"));
brigade2->addWorkerToBrigade(new Laborer("Pavlo Marchenko", "assembler"));
brigade2->addWorkerToBrigade(new Laborer("Shamil Rykhlo", "welder"));
brigade2->addWorkerToBrigade(new Laborer("Khodota Stetsiuk", "welder"));
brigade2->addWorkerToBrigade(new Laborer("Korniliy Koretsky", "locksmith"));
brigade2->addWorkerToBrigade(new Laborer("Radoslav Zolotarenko", "locksmith"));
brigade2->addWorkerToBrigade(new Laborer("Yehor Lymaryov", "locksmith"));
brigade2->addWorkerToBrigade(new Laborer("Zlatodan Hlushchak", "locksmith"));
brigade2->addWorkerToBrigade(new Laborer("Andriy Petrenko", "turner"));
brigade2->addWorkerToBrigade(new Laborer("Volodymyr Semenenko", "turner"));
brigade2->addWorkerToBrigade(new Laborer("Mykhailo Ivanenko", "turner"));
Brigade* brigade3 = new Brigade("Brigade 3");
brigade3->addWorkerToBrigade(new Laborer("Dmytro Lysenko", "assembler"));
brigade3->addWorkerToBrigade(new Laborer("Andriy Kravchenko", "assembler"));
brigade3->addWorkerToBrigade(new Laborer("Volodymyr Kozlov", "assembler"));
brigade3->addWorkerToBrigade(new Laborer("Victor Hrytsenko", "assembler"));
brigade3->addWorkerToBrigade(new Laborer("Afanasiy Kmita", "assembler"));
brigade3->addWorkerToBrigade(new Laborer("Osmomysl Tershakovets", "assembler"));
brigade3->addWorkerToBrigade(new Laborer("Khoyan Adamsky", "welder"));
brigade3->addWorkerToBrigade(new Laborer("Korniliy Otroshchenko", "welder"));
brigade3->addWorkerToBrigade(new Laborer("Illiya Deysun", "welder"));
brigade3->addWorkerToBrigade(new Laborer("Izyaslav Lukash", "welder"));
brigade3->addWorkerToBrigade(new Laborer("Fedir Holubovych", "locksmith"));
brigade3->addWorkerToBrigade(new Laborer("Izyaslav Bablyak", "locksmith"));
brigade3->addWorkerToBrigade(new Laborer("Rodoslav Shcherbatyuk", "locksmith"));
brigade3->addWorkerToBrigade(new Laborer("Faust Bazavluchenko", "locksmith"));
brigade3->addWorkerToBrigade(new Laborer("Nykydym Ogar", "locksmith"));
brigade3->addWorkerToBrigade(new Laborer("Serhiy Petrenko", "turner"));
brigade3->addWorkerToBrigade(new Laborer("Oleg Kovalenko", "turner"));
brigade3->addWorkerToBrigade(new Laborer("Vasyl Sydorenko", "turner"));
Brigade* brigade4 = new Brigade("Brigade 4");
brigade4->addWorkerToBrigade(new Laborer("Vadym Serhiyenko", "foreman"));
brigade4->addWorkerToBrigade(new Laborer("Stanislav Bulatovich", "assembler"));
brigade4->addWorkerToBrigade(new Laborer("Olexiy Semenenko", "assembler"));
brigade4->addWorkerToBrigade(new Laborer("Roman Gordiyenko", "assembler"));
brigade4->addWorkerToBrigade(new Laborer("Andriy Kravchenko", "assembler"));
brigade4->addWorkerToBrigade(new Laborer("Yaroslav Paholyuk", "welder"));
brigade4->addWorkerToBrigade(new Laborer("Nazariy Sytnyk", "welder"));
brigade4->addWorkerToBrigade(new Laborer("Naslav Tryfonyuk", "welder"));
brigade4->addWorkerToBrigade(new Laborer("Emmanuil Doniy", "welder"));
brigade4->addWorkerToBrigade(new Laborer("Kalenyk Karavansky", "locksmith"));
brigade4->addWorkerToBrigade(new Laborer("Shamil Romanko", "locksmith"));
brigade4->addWorkerToBrigade(new Laborer("Us Horyansky", "locksmith"));
brigade4->addWorkerToBrigade(new Laborer("Taras Tyahno", "locksmith"));
brigade4->addWorkerToBrigade(new Laborer("Petro Semenenko", "turner"));
brigade4->addWorkerToBrigade(new Laborer("Ivan Petrenko", "turner"));
Brigade* brigade5 = new Brigade("Brigade 5");
brigade5->addWorkerToBrigade(new Laborer("Zhyvaslav Drozd", "foreman"));
brigade5->addWorkerToBrigade(new Laborer("Herasym Martsenyuk", "foreman"));
brigade5->addWorkerToBrigade(new Laborer("Denys Ihnatenko", "assembler"));
brigade5->addWorkerToBrigade(new Laborer("Artem Tymoshenko", "assembler"));
brigade5->addWorkerToBrigade(new Laborer("Oleksiy Maslov", "assembler"));
brigade5->addWorkerToBrigade(new Laborer("Artem Romanov", "assembler"));
brigade5->addWorkerToBrigade(new Laborer("Serhiy Karasov", "assembler"));
brigade5->addWorkerToBrigade(new Laborer("Naslav Barbon", "welder"));
brigade5->addWorkerToBrigade(new Laborer("Chestyslav Ostroushko", "welder"));
brigade5->addWorkerToBrigade(new Laborer("Dobrynya Lysytskyi", "welder"));
brigade5->addWorkerToBrigade(new Laborer("Kuybida Yermolenko", "welder"));
brigade5->addWorkerToBrigade(new Laborer("Zvenyhor Shapovalenko", "welder"));
brigade5->addWorkerToBrigade(new Laborer("Nykydym Ohar", "locksmith"));
brigade5->addWorkerToBrigade(new Laborer("Faust Bazavluchenko", "locksmith"));
brigade5->addWorkerToBrigade(new Laborer("Khudan Kushnirenko", "locksmith"));
brigade5->addWorkerToBrigade(new Laborer("Cheslav Angelovych", "locksmith"));
brigade5->addWorkerToBrigade(new Laborer("Kolodiy Chepura", "locksmith"));
brigade5->addWorkerToBrigade(new Laborer("Knyazhoslav Gudenko", "locksmith"));
brigade5->addWorkerToBrigade(new Laborer("Oleksandr Ivanenko", "turner"));
brigade5->addWorkerToBrigade(new Laborer("Maksym Sydorenko", "turner"));
Brigade* brigade6 = new Brigade("Brigade 6");
brigade6->addWorkerToBrigade(new Laborer("Sherlock Zbarazkyi", "foreman"));
brigade6->addWorkerToBrigade(new Laborer("Oleksandr Martynenko", "assembler"));
brigade6->addWorkerToBrigade(new Laborer("Yuri Vasilenko", "assembler"));
brigade6->addWorkerToBrigade(new Laborer("Dmytro Kovalevskyi", "assembler"));
brigade6->addWorkerToBrigade(new Laborer("Ihor Kucherenko", "assembler"));
brigade6->addWorkerToBrigade(new Laborer("Mykola Klymenko", "assembler"));
brigade6->addWorkerToBrigade(new Laborer("Yaropolk Symonenko", "welder"));
brigade6->addWorkerToBrigade(new Laborer("Korniy Gordasevych", "welder"));
brigade6->addWorkerToBrigade(new Laborer("Yohan Ivashchuk", "welder"));
brigade6->addWorkerToBrigade(new Laborer("Anastas Stepura", "locksmith"));
brigade6->addWorkerToBrigade(new Laborer("Fedir Yanchyk", "locksmith"));
brigade6->addWorkerToBrigade(new Laborer("Ulychan Burchak", "locksmith"));
brigade6->addWorkerToBrigade(new Laborer("Peremysl Matkobozhyk", "locksmith"));
brigade6->addWorkerToBrigade(new Laborer("Anatoliy Kovalenko", "turner"));
brigade6->addWorkerToBrigade(new Laborer("Roman Semenenko", "turner"));
department1->addBrigade(brigade1);
department1->addBrigade(brigade2);
department2->addBrigade(brigade3);
department2->addBrigade(brigade4);
department3->addBrigade(brigade5);
department3->addBrigade(brigade6);
enterprise.addDepartment(department1);
enterprise.addDepartment(department2);
enterprise.addDepartment(department3);
cout << "\n\n";
int cchoice2;
vector<WorkersOfBrigade*> mastersOfRegion1;
vector<WorkersOfBrigade*> mastersOfRegion2;
vector<WorkersOfBrigade*> mastersOfRegion3;
vector<WorkersOfBrigade*> mastersOfRegion4;
vector<WorkersOfBrigade*> mastersOfRegion5;
vector<WorkersOfBrigade*> mastersOfRegion6;
Tester* tester1 = new Tester("", "Ivan", "Petrov");
Tester* tester2 = new Tester("", "Oleksandr", "Sidorov");
Tester* tester3 = new Tester("", "Mykhailo", "Ivanov");
Tester* tester4 = new Tester("", "Andriy", "Kovalenko");
Tester* tester5 = new Tester("", "Serhiy", "Tkachuk");
Tester* tester6 = new Tester("", "Volodymyr", "Zhukov");
Tester* tester7 = new Tester("", "Pavlo", "Hryhorenko");
Tester* tester8 = new Tester("", "Oleg", "Stepanovych");
Tester* tester9 = new Tester("", "Viktor", "Lytvynenko");
Tester* tester10 = new Tester("", "Dmytro", "Shevchenko");
Tester* tester11 = new Tester("", "Ihor", "Melnik");
Tester* tester12 = new Tester("", "Oleksiy", "Vasyliev");
Tester* tester13 = new Tester("", "Yuriy", "Kravchenko");
Tester* tester14 = new Tester("", "Maxym", "Morozov");
Tester* tester15 = new Tester("", "Vadym", "Kozlov");
Tester* tester16 = new Tester("", "Roman", "Holovko");
Tester* tester17 = new Tester("", "Artem", "Boiko");
Tester* tester18 = new Tester("", "Vitaliy", "Kravets");
Tester* tester19 = new Tester("", "Stanislav", "Hryshchenko");
Tester* tester20 = new Tester("", "Oleksandr", "Sokolov");
Tester* tester21 = new Tester("", "Bohdan", "Fedorov");
Tester* tester22 = new Tester("", "Mark", "Myronov");
Tester* tester23 = new Tester("", "Hennadiy", "Shevchuk");
Tester* tester24 = new Tester("", "Vasyl", "Chernov");
Tester* tester25 = new Tester("", "Taras", "Danilenko");
Tester* tester26 = new Tester("", "Ruslan", "Lysenko");
Tester* tester27 = new Tester("", "Yaroslav", "Shapoval");
Tester* tester28 = new Tester("", "Anatoliy", "Kucherenko");
Tester* tester29 = new Tester("", "Semen", "Yakovenko");
    Product product1("Kamaz");
    Product product2("Man");
    Product product3("Volvo");
    Product product4("Ural");
    Product product5("DAF");
    Product product6("Ford");
    Product product7("Toyota");
    Product product8("BMW");
    Product product9("Dodge");
    Product product10("Fiat");
    Product product11("Audi");
    Product product12("Mercedes-Benz");
    Product product13("Isuzu");
    Product product14("Iris");
    Product product15("Yutong");
    Product product16("Challenger");
    Product product17("Kubota");
    Product product18("Claas");
    Product product19("JCB");
    Product product20("Caterpillar");
    Product product21("Liebherr");
    Product product22("Terex");
    Product product23("Lifan");
    Product product24("Honda");
    Product product25("Geon");
    Product product26("Yamaha");
    Product product27("Kovi");
    Product product28("Ducati");
    Product product29("Suzuki");
    Product product30("KTM");
    product1.addTester(tester1);
    product1.addTester(tester2);
    product2.addTester(tester2);
    product2.addTester(tester3);
    product3.addTester(tester4);
    product3.addTester(tester5);
    product4.addTester(tester5);
    product4.addTester(tester6);
    product5.addTester(tester4);
    product5.addTester(tester7);
    product6.addTester(tester6);
    product6.addTester(tester9);
    product7.addTester(tester8);
    product7.addTester(tester7);
    product8.addTester(tester9);
    product9.addTester(tester8);
    product10.addTester(tester10);
    product10.addTester(tester11);
    product11.addTester(tester12);
    product12.addTester(tester13);
    product12.addTester(tester14);
    product13.addTester(tester15);
    product14.addTester(tester11);
    product15.addTester(tester16);
    product16.addTester(tester13);
    product17.addTester(tester17);
    product17.addTester(tester14);
    product18.addTester(tester18);
    product19.addTester(tester19);
    product19.addTester(tester20);
    product20.addTester(tester17);
    product20.addTester(tester21);
    product21.addTester(tester23);
    product22.addTester(tester22);
    product23.addTester(tester21);
    product24.addTester(tester23);
    product25.addTester(tester24);
    product26.addTester(tester25);
    product27.addTester(tester26);
    product28.addTester(tester27);
    product29.addTester(tester28);
    product30.addTester(tester29);
    Category category1("trucks");
    Category category2("cars");
    Category category3("buses");
    Category category4("agricultural machines");
    Category category5("road construction vehicles");
    Category category6("motorcycles");
    category1.addProduct(product1); category1.addProduct(product2); category1.addProduct(product3); category1.addProduct(product4); category1.addProduct(product5);
    category2.addProduct(product6); category2.addProduct(product7); category2.addProduct(product8); category2.addProduct(product9); category2.addProduct(product10); category2.addProduct(product11);
    category3.addProduct(product12); category3.addProduct(product13); category3.addProduct(product14); category3.addProduct(product15);
    category4.addProduct(product16); category4.addProduct(product17); category4.addProduct(product18); category4.addProduct(product19);
    category5.addProduct(product20); category5.addProduct(product21); category5.addProduct(product22);
    category6.addProduct(product23); category6.addProduct(product24); category6.addProduct(product25); category6.addProduct(product26); category6.addProduct(product27);
    category6.addProduct(product28); category6.addProduct(product29); category6.addProduct(product30);
while(true){
    int mainChoice;
    cout << "\nSelect an option:\n";
    cout << "1. Get a list of types of products of a separate category and in general that assembled by the specified workshop, enterprise.\n";
    cout << "2. Get the number and list of products of a separate category and in general, collected the specified workshop, site, enterprise as a whole for a certain period of time.\n";
    cout << "3. Get data on the personnel of the shop, the enterprise as a whole and by specified categories of engineering and technical personnel and workers.\n";
    cout << "4. Get the number and list of plots of the specified workshop, enterprise in as a whole and their bosses.\n";
    cout << "5. Get a list of works that the specified product undergoes.\n";
    cout << "6. Get the composition of the teams of the specified site, workshop and the list of masters of the specified site, workshop.\n";
    cout << "7. Get a list of products of a separate category and in general, which are collected now the specified plot, workshop, enterprise.\n";
    cout << "8. Get the composition of the teams participating in the preparation of the specified product\n";
    cout << "9. Get a list of participating testing laboratories tests of a specific product.\n";
    cout << "10. Get a list of products of a separate category and in general, which passed tests in the specified laboratory for a certain period.\n";
    cout << "11. Get a list of testers participating in the tests of the specified product, products of a separate category and in general in the specified laboratory according to a certain period.\n";
    cout << "12. Get the composition of the equipment used in the test \nof the specified product, products of a separate category and in general in the specified laboratory according to \na certain period.\n";
    cout << "13. Get the number and list of products of a separate category and in general that \nare assembled by the specified workshop, site, enterprise at the present time.\n";
    cout << "14. Exit the program\n";
    cin >> mainChoice;
    if(mainChoice == 14){
        break;
    }
    else if(mainChoice == 1){
    int choice;
do {
    cout << "\nSelect an option:\n";
    cout << "1. List of all categories and products of the enterprise\n";
    cout << "2. List of all categories and products of department 1\n";
    cout << "3. List of all categories and products of department 2\n";
    cout << "4. List of all categories and products of department 3\n";
    cout << "5. List of products of the selected enterprise category\n";
    cout << "6. List of products of the selected category of department 1\n";
    cout << "7. List of products of the selected category of department 2\n";
    cout << "8. List of products of the selected category of department 3\n";
    cout << "9. Exit the program\n";
    cin >> choice;

    switch (choice) {
    case 1:
        db.printProductsOfFactory();
        break;
    case 2:
        db.printProductsOfDepartament1();
        break;
    case 3:
        db.printProductsOfDepartament2();
        break;
    case 4:
        db.printProductsOfDepartament3();
        break;
    case 5:
        db.printCategoryOfFactoryByIndex();
        break;
    case 6:
        db.printCategoryOfDepartament1ByIndex();
        break;
    case 7:
        db.printCategoryOfDepartament2ByIndex();
        break;
    case 8:
        db.printCategoryOfDepartament3ByIndex();
        break;
    case 9:
        cout << "Work on the program has been completed\n";
        break;
    default:
        cout << "Invalid option entered. Try again\n";
    break;
    }
} while (choice != 9);
continue;
}
else if(mainChoice == 2){
    factory.addProduct(ProductByDate("Trucks:  ", ""));
    factory.addProduct(ProductByDate("Kamaz", ""));
    factory.addProduct(ProductByDate("MAN", ""));
    factory.addProduct(ProductByDate("MAN", ""));
    factory.addProduct(ProductByDate("Volvo", ""));
    factory.addProduct(ProductByDate("Volvo", ""));
    factory.addProduct(ProductByDate("Volvo", ""));
    factory.addProduct(ProductByDate("Ural", ""));
    factory.addProduct(ProductByDate("DAF", ""));
    factory.addProduct(ProductByDate("DAF", ""));
    factory.addProduct(ProductByDate("DAF", ""));
    factory.addProduct(ProductByDate("\ncars:  ", ""));
    factory.addProduct(ProductByDate("Ford", ""));
    factory.addProduct(ProductByDate("Ford", ""));
    factory.addProduct(ProductByDate("Ford", ""));
    factory.addProduct(ProductByDate("Toyota", ""));
    factory.addProduct(ProductByDate("Toyota", ""));
    factory.addProduct(ProductByDate("Dodge", ""));
    factory.addProduct(ProductByDate("BMW", ""));
    factory.addProduct(ProductByDate("Dodge", ""));
    factory.addProduct(ProductByDate("Dodge", ""));
    factory.addProduct(ProductByDate("Fiat", ""));
    factory.addProduct(ProductByDate("Fiat", ""));
    factory.addProduct(ProductByDate("Audi", ""));
    factory.addProduct(ProductByDate("Audi", ""));
    factory.addProduct(ProductByDate("Audi", ""));
    factory.addProduct(ProductByDate("Audi", ""));
    factory.addProduct(ProductByDate("\nBuses:  ", ""));
    factory.addProduct(ProductByDate("Mercedes-Benz", ""));
    factory.addProduct(ProductByDate("Mercedes-Benz", ""));
    factory.addProduct(ProductByDate("Isuzu", ""));
    factory.addProduct(ProductByDate("Isuzu", ""));
    factory.addProduct(ProductByDate("Iris", ""));
    factory.addProduct(ProductByDate("Isuzu", ""));
    factory.addProduct(ProductByDate("Youtong", ""));
    factory.addProduct(ProductByDate("\nAgricultural machinery:  ", ""));
    factory.addProduct(ProductByDate("Challenger", ""));
    factory.addProduct(ProductByDate("Challenger", ""));
    factory.addProduct(ProductByDate("Challenger", ""));
    factory.addProduct(ProductByDate("Kubota", ""));
    factory.addProduct(ProductByDate("Kubota", ""));
    factory.addProduct(ProductByDate("Kubota", ""));
    factory.addProduct(ProductByDate("JCB", ""));
    factory.addProduct(ProductByDate("JCB", ""));
    factory.addProduct(ProductByDate("\nRoad construction machines:  ", ""));
    factory.addProduct(ProductByDate("Caterpillar", ""));
    factory.addProduct(ProductByDate("Caterpillar", ""));
    factory.addProduct(ProductByDate("Caterpillar", ""));
    factory.addProduct(ProductByDate("Liebherr", ""));
    factory.addProduct(ProductByDate("Liebherr", ""));
    factory.addProduct(ProductByDate("Terex", ""));
    factory.addProduct(ProductByDate("Terex", ""));
    factory.addProduct(ProductByDate("\nMotorcycles:  ", ""));
    factory.addProduct(ProductByDate("Lifan", ""));
    factory.addProduct(ProductByDate("Lifan", ""));
    factory.addProduct(ProductByDate("Lifan", ""));
    factory.addProduct(ProductByDate("Honda", ""));
    factory.addProduct(ProductByDate("Geon", ""));
    factory.addProduct(ProductByDate("Honda", ""));
    factory.addProduct(ProductByDate("Yamaha", ""));
    factory.addProduct(ProductByDate("Yamaha", ""));
    factory.addProduct(ProductByDate("Ducati", ""));
    factory.addProduct(ProductByDate("Suzuki", ""));
    factory.addProduct(ProductByDate("Suzuki", ""));
    factory.addProduct(ProductByDate("Suzuki", ""));
    factory.addProduct(ProductByDate("Kovi", ""));
    factory.addProduct(ProductByDate("KTM", ""));
    departament.addProduct(ProductByDate("Passenger cars:  ", ""));
    departament.addProduct(ProductByDate("Ford", ""));
    departament.addProduct(ProductByDate("Ford", ""));
    departament.addProduct(ProductByDate("Ford", ""));
    departament.addProduct(ProductByDate("Toyota", ""));
    departament.addProduct(ProductByDate("Toyota", ""));
    departament.addProduct(ProductByDate("Dodge", ""));
    departament.addProduct(ProductByDate("BMW", ""));
    departament.addProduct(ProductByDate("Dodge", ""));
    departament.addProduct(ProductByDate("Dodge", ""));
    departament.addProduct(ProductByDate("Fiat", ""));
    departament.addProduct(ProductByDate("Fiat", ""));
    departament.addProduct(ProductByDate("Audi", ""));
    departament.addProduct(ProductByDate("Audi", ""));
    departament.addProduct(ProductByDate("Audi", ""));
    departament.addProduct(ProductByDate("Audi", ""));
    departament.addProduct(ProductByDate("\nMotorcycles:  ", ""));
    departament.addProduct(ProductByDate("Lifan", ""));
    departament.addProduct(ProductByDate("Lifan", ""));
    departament.addProduct(ProductByDate("Lifan", ""));
    departament.addProduct(ProductByDate("Honda", ""));
    departament.addProduct(ProductByDate("Geon", ""));
    departament.addProduct(ProductByDate("Honda", ""));
    departament.addProduct(ProductByDate("Yamaha", ""));
    departament.addProduct(ProductByDate("Yamaha", ""));
    departament.addProduct(ProductByDate("Ducati", ""));
    departament.addProduct(ProductByDate("Suzuki", ""));
    departament.addProduct(ProductByDate("Suzuki", ""));
    departament.addProduct(ProductByDate("Suzuki", ""));
    departament.addProduct(ProductByDate("Kovi", ""));
    departament.addProduct(ProductByDate("KTM", ""));
    region.addProduct(ProductByDate("Cars:  ", ""));
    region.addProduct(ProductByDate("Ford", ""));
    region.addProduct(ProductByDate("Ford", ""));
    region.addProduct(ProductByDate("Ford", ""));
    region.addProduct(ProductByDate("Toyota", ""));
    region.addProduct(ProductByDate("Toyota", ""));
    region.addProduct(ProductByDate("Dodge", ""));
    region.addProduct(ProductByDate("BMW", ""));
    region.addProduct(ProductByDate("Dodge", ""));
    region.addProduct(ProductByDate("Dodge", ""));
    region.addProduct(ProductByDate("Fiat", ""));
    region.addProduct(ProductByDate("Fiat", ""));
    region.addProduct(ProductByDate("Audi", ""));
    region.addProduct(ProductByDate("Audi", ""));
    region.addProduct(ProductByDate("Audi", ""));
    region.addProduct(ProductByDate("Audi", ""));
    region.addProduct(ProductByDate("\nMotorcycles:  ", ""));
    region.addProduct(ProductByDate("Lifan", ""));
    region.addProduct(ProductByDate("Lifan", ""));
    region.addProduct(ProductByDate("Lifan", ""));
    region.addProduct(ProductByDate("Honda", ""));
    region.addProduct(ProductByDate("Geon", ""));
    region.addProduct(ProductByDate("Honda", ""));
    region.addProduct(ProductByDate("Yamaha", ""));
    region.addProduct(ProductByDate("Yamaha", ""));
    region.addProduct(ProductByDate("Ducati", ""));
    region.addProduct(ProductByDate("Suzuki", ""));
    region.addProduct(ProductByDate("Suzuki", ""));
    region.addProduct(ProductByDate("Suzuki", ""));
    region.addProduct(ProductByDate("Kovi", ""));
    region.addProduct(ProductByDate("KTM", ""));
    cout << "\n\n";
    int chooice;
do {
    cout << "\nSelect an option:\n";
    cout << "1. Get the number and list of products of a separate category assembled by factory for a certain period of time\n";
    cout << "2. Get the number and list of products of a separate category assembled by department 1 for a certain period of time\n";
    cout << "3. Get the number and list of products of a separate category assembled by department 2 for a certain period of time\n";
    cout << "4. Get the number and list of products of a separate category assembled by department 3 for a certain period of time\n";
    cout << "5. Get the number and list of products of a separate category assembled by region 1 for a certain period of time\n";
    cout << "6. Get the number and list of products of a separate category assembled by region 2 for a certain period of time\n";
    cout << "7. Get the number and list of products of a separate category assembled by region 3 for a certain period of time\n";
    cout << "8. Get the number and list of products of a separate category assembled by region 4 for a certain period of time\n";
    cout << "9. Get the number and list of products of a separate category assembled by region 5 for a certain period of time\n";
    cout << "10. Get the number and list of products of a separate category assembled by region 6 for a certain period of time\n";
    cout << "11. Exit the program\n";
    cin >> chooice;
    switch (chooice) {
    case 1:
    while(true){
    int monthIndex;
    cout << "\nEnter the number of the month (0 to 5) to display all products of the factory and their quantity for this entered month or enter -1 to exit: ";
    cin >> monthIndex;
    if (monthIndex == -1){
        cout << "\n\n";
        break;
    }
    else if (monthIndex == 0){
        cout << "List of all products of the factory for January:\n";
        printAllProductsAndCountForJanuary(factory.getProducts());
        cout << endl;
    }
    else if (monthIndex == 1){
        cout << "List of all products of the factory for February:\n";
        printAllProductsAndCountForFebruary(factory.getProducts());
        cout << endl;
    }
     else if (monthIndex == 2){
        cout << "List of all products of the factory for March:\n";
        printAllProductsAndCountForMarch(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 3){
        cout << "List of all products of the factory for April:\n";
        printAllProductsAndCountForApril(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 4){
        cout << "List of all products of the factory for May:\n";
        printAllProductsAndCountForMay(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 5){
        cout << "List of all products of the factory for June:\n";
        printAllProductsAndCountForJune(factory.getProducts());
        cout << endl;
     }
     else {
        cout << "Invalide index of month!";
     }
    }
    break;
    case 2:
    while(true){
    int monthIndex;
    cout << "\nEnter the number of the month (0 to 5) to display all products of the department 1 and their quantity for this entered month or enter -1 to exit: ";
    cin >> monthIndex;
    if (monthIndex == -1){
        cout << "\n\n";
        break;
    }
    else if (monthIndex == 0){
        printProductsAndCountByDepartament1ForJanuary(factory.getProducts());
        cout << endl;
    }
    else if (monthIndex == 1){
        printProductsAndCountByDepartament1ForFebruary(factory.getProducts());
        cout << endl;
    }
     else if (monthIndex == 2){
        printProductsAndCountByDepartament1ForMarch(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 3){
        printProductsAndCountByDepartament1ForApril(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 4){
        printProductsAndCountByDepartament1ForMay(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 5){
        printProductsAndCountByDepartament1ForJune(factory.getProducts());
        cout << endl;
     }
     else {
        cout << "Invalide index of month!";
     }
    }
        break;
    case 3:
    while(true){
    int monthIndex;
    cout << "\nEnter the number of the month (0 to 5) to display all products of the department 2 and their quantity for this entered month or enter -1 to exit: ";
    cin >> monthIndex;
    if (monthIndex == -1){
        cout << "\n\n";
        break;
    }
    else if (monthIndex == 0){
        printProductsAndCountByDepartament2ForJanuary(factory.getProducts());
        cout << endl;
    }
    else if (monthIndex == 1){
        printProductsAndCountByDepartament2ForFebruary(factory.getProducts());
        cout << endl;
    }
     else if (monthIndex == 2){
        printProductsAndCountByDepartament2ForMarch(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 3){
        printProductsAndCountByDepartament2ForApril(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 4){
        printProductsAndCountByDepartament2ForMay(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 5){
        printProductsAndCountByDepartament2ForJune(factory.getProducts());
        cout << endl;
     }
     else {
        cout << "Invalide index of month!";
     }
    }
        break;
    case 4:
    while(true){
    int monthIndex;
    cout << "\nEnter the number of the month (0 to 5) to display all products of the department 3 and their quantity for this entered month or enter -1 to exit: ";
    cin >> monthIndex;
    if (monthIndex == -1){
        cout << "\n\n";
        break;
    }
    else if (monthIndex == 0){
        printProductsAndCountByDepartament3ForJanuary(factory.getProducts());
        cout << endl;
    }
    else if (monthIndex == 1){
        printProductsAndCountByDepartament3ForFebruary(factory.getProducts());
        cout << endl;
    }
     else if (monthIndex == 2){
        printProductsAndCountByDepartament3ForMarch(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 3){
        printProductsAndCountByDepartament3ForApril(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 4){
        printProductsAndCountByDepartament3ForMay(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 5){
        printProductsAndCountByDepartament3ForJune(factory.getProducts());
        cout << endl;
     }
     else {
        cout << "Invalide index of month!";
     }
    }
        break;
    case 5:
    while(true){
    int monthIndex;
    cout << "\nEnter the number of the month (0 to 5) to display all products of the region 1 and their quantity for this entered month or enter -1 to exit: ";
    cin >> monthIndex;
    if (monthIndex == -1){
        cout << "\n\n";
        break;
    }
    else if (monthIndex == 0){
        printProductsAndCountByRegion1ForJanuary(factory.getProducts());
        cout << endl;
    }
    else if (monthIndex == 1){
        printProductsAndCountByRegion1ForFebruary(factory.getProducts());
        cout << endl;
    }
     else if (monthIndex == 2){
        printProductsAndCountByRegion1ForMarch(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 3){
        printProductsAndCountByRegion1ForApril(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 4){
        printProductsAndCountByRegion1ForMay(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 5){
        printProductsAndCountByRegion1ForJune(factory.getProducts());
        cout << endl;
     }
     else {
        cout << "Invalide index of month!";
     }
    }
        break;
    case 6:
    while(true){
    int monthIndex;
    cout << "\nEnter the number of the month (0 to 5) to display all products of the region 1 and their quantity for this entered month or enter -1 to exit: ";
    cin >> monthIndex;
    if (monthIndex == -1){
        cout << "\n\n";
        break;
    }
    else if (monthIndex == 0){
        printProductsAndCountByRegion2ForJanuary(factory.getProducts());
        cout << endl;
    }
    else if (monthIndex == 1){
        printProductsAndCountByRegion2ForFebruary(factory.getProducts());
        cout << endl;
    }
     else if (monthIndex == 2){
        printProductsAndCountByRegion2ForMarch(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 3){
        printProductsAndCountByRegion2ForApril(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 4){
        printProductsAndCountByRegion2ForMay(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 5){
        printProductsAndCountByRegion2ForJune(factory.getProducts());
        cout << endl;
     }
     else {
        cout << "Invalide index of month!";
     }
    }
        break;
    case 7:
    while(true){
    int monthIndex;
    cout << "\nEnter the number of the month (0 to 5) to display all products of the region 1 and their quantity for this entered month or enter -1 to exit: ";
    cin >> monthIndex;
    if (monthIndex == -1){
        cout << "\n\n";
        break;
    }
    else if (monthIndex == 0){
        printProductsAndCountByRegion3ForJanuary(factory.getProducts());
        cout << endl;
    }
    else if (monthIndex == 1){
        printProductsAndCountByRegion3ForFebruary(factory.getProducts());
        cout << endl;
    }
     else if (monthIndex == 2){
        printProductsAndCountByRegion3ForMarch(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 3){
        printProductsAndCountByRegion3ForApril(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 4){
        printProductsAndCountByRegion3ForMay(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 5){
        printProductsAndCountByRegion3ForJune(factory.getProducts());
        cout << endl;
     }
     else {
        cout << "Invalide index of month!";
     }
    }
        break;
    case 8:
    while(true){
    int monthIndex;
    cout << "\nEnter the number of the month (0 to 5) to display all products of the region 1 and their quantity for this entered month or enter -1 to exit: ";
    cin >> monthIndex;
    if (monthIndex == -1){
        cout << "\n\n";
        break;
    }
    else if (monthIndex == 0){
        printProductsAndCountByRegion4ForJanuary(factory.getProducts());
        cout << endl;
    }
    else if (monthIndex == 1){
        printProductsAndCountByRegion4ForFebruary(factory.getProducts());
        cout << endl;
    }
     else if (monthIndex == 2){
        printProductsAndCountByRegion4ForMarch(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 3){
        printProductsAndCountByRegion4ForApril(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 4){
        printProductsAndCountByRegion4ForMay(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 5){
        printProductsAndCountByRegion4ForJune(factory.getProducts());
        cout << endl;
     }
     else {
        cout << "Invalide index of month!";
     }
    }
        break;
    case 9:
    while(true){
    int monthIndex;
    cout << "\nEnter the number of the month (0 to 5) to display all products of the region 1 and their quantity for this entered month or enter -1 to exit: ";
    cin >> monthIndex;
    if (monthIndex == -1){
        cout << "\n\n";
        break;
    }
    else if (monthIndex == 0){
        printProductsAndCountByRegion5ForJanuary(factory.getProducts());
        cout << endl;
    }
    else if (monthIndex == 1){
        printProductsAndCountByRegion5ForFebruary(factory.getProducts());
        cout << endl;
    }
     else if (monthIndex == 2){
        printProductsAndCountByRegion5ForMarch(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 3){
        printProductsAndCountByRegion5ForApril(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 4){
        printProductsAndCountByRegion5ForMay(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 5){
        printProductsAndCountByRegion5ForJune(factory.getProducts());
        cout << endl;
     }
     else {
        cout << "Invalide index of month!";
     }
    }
        break;
    case 10:
    while(true){
    int monthIndex;
    cout << "\nEnter the number of the month (0 to 5) to display all products of the region 6 and their quantity for this entered month or enter -1 to exit: ";
    cin >> monthIndex;
    if (monthIndex == -1){
        cout << "\n\n";
        break;
    }
    else if (monthIndex == 0){
        printProductsAndCountByRegion6ForJanuary(factory.getProducts());
        cout << endl;
    }
    else if (monthIndex == 1){
        printProductsAndCountByRegion6ForFebruary(factory.getProducts());
        cout << endl;
    }
     else if (monthIndex == 2){
        printProductsAndCountByRegion6ForMarch(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 3){
        printProductsAndCountByRegion6ForApril(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 4){
        printProductsAndCountByRegion6ForMay(factory.getProducts());
        cout << endl;
     }
     else if (monthIndex == 5){
        printProductsAndCountByRegion6ForJune(factory.getProducts());
        cout << endl;
     }
     else {
        cout << "Invalide index of month!";
     }
    }
        break;
    case 11:
        cout << "Work on the program has been completed\n";
        break;
    default:
        cout << "Invalid option entered. Try again\n";
        break;
    }
} while (chooice != 11);
continue;
}
else if(mainChoice == 3){
    vector<Employee> departamentEmployees;
    vector<Employee> factoryEmployees;
    vector<Employee> engineeringStaff;
    vector<Employee> workers;
factoryEmployees.push_back(Employee("Anna", "Ivanova", "director"));
factoryEmployees.push_back(Employee("Peter", "Semenov", "financial manager"));
factoryEmployees.push_back(Employee("Peter", "Mamchenko", "financial manager"));
factoryEmployees.push_back(Employee("Maria", "Vasilychuk", "HR manager"));
factoryEmployees.push_back(Employee("Andrew", "Kuzmin", "HR manager"));
factoryEmployees.push_back(Employee("Denis", "Ponomarenko", "HR manager"));
factoryEmployees.push_back(Employee("Ivan", "Petrov", "supervisor"));
factoryEmployees.push_back(Employee("Alexander", "Sidorenko", "supervisor"));
factoryEmployees.push_back(Employee("Maxim", "Petrenko", "supervisor"));
factoryEmployees.push_back(Employee("Oleg", "Grigorovich", "supervisor"));
factoryEmployees.push_back(Employee("Alexander", "Kovalenko", "master"));
factoryEmployees.push_back(Employee("Vladimir", "Polyakov", "master"));
factoryEmployees.push_back(Employee("Sergey", "Melnik", "master"));
factoryEmployees.push_back(Employee("Dmitry", "Lysenko", "master"));
factoryEmployees.push_back(Employee("Andrew", "Kravchenko", "master"));
factoryEmployees.push_back(Employee("Vadim", "Sergienko", "master"));
factoryEmployees.push_back(Employee("Zhyvoslav", "Drozd", "master"));
factoryEmployees.push_back(Employee("Gerasim", "Martsenyuk", "master"));
factoryEmployees.push_back(Employee("Sherlock", "Zbarazhsky", "master"));
factoryEmployees.push_back(Employee("Andrew", "Kravchenko", "collector"));
factoryEmployees.push_back(Employee("Vitaliy", "Morozov", "collector"));
factoryEmployees.push_back(Employee("Andrew", "Polyakov", "collector"));
factoryEmployees.push_back(Employee("Mikhail", "Bondarenko", "collector"));
factoryEmployees.push_back(Employee("Pavel", "Marchenko", "collector"));
factoryEmployees.push_back(Employee("Vladimir", "Kozlov", "collector"));
factoryEmployees.push_back(Employee("Victor", "Gritsenko", "collector"));
factoryEmployees.push_back(Employee("Afanasii", "Kmita", "collector"));
factoryEmployees.push_back(Employee("Osmomisl", "Tershakovets", "collector"));
factoryEmployees.push_back(Employee("Stanislav", "Bulatovich", "collector"));
factoryEmployees.push_back(Employee("Alexey", "Semenenko", "collector"));
factoryEmployees.push_back(Employee("Roman", "Gordienko", "collector"));
factoryEmployees.push_back(Employee("Andrew", "Kravchenko", "collector"));
factoryEmployees.push_back(Employee("Denis", "Ignatenko", "collector"));
factoryEmployees.push_back(Employee("Artem", "Tymoshenko", "collector"));
factoryEmployees.push_back(Employee("Alexey", "Maslov", "collector"));
factoryEmployees.push_back(Employee("Artem", "Romanov", "collector"));
factoryEmployees.push_back(Employee("Sergey", "Karasov", "collector"));
factoryEmployees.push_back(Employee("Alexander", "Martinenko", "collector"));
factoryEmployees.push_back(Employee("Yuri", "Vasilenko", "collector"));
factoryEmployees.push_back(Employee("Dmitry", "Kovalevsky", "collector"));
factoryEmployees.push_back(Employee("Igor", "Kucherenko", "collector"));
factoryEmployees.push_back(Employee("Nikola", "Klimenko", "collector"));
factoryEmployees.push_back(Employee("Vitaliy", "Miroshnichenko", "engineer"));
factoryEmployees.push_back(Employee("Alexander", "Petrov", "engineer"));
factoryEmployees.push_back(Employee("Mikhail", "Ivanov", "engineer"));
factoryEmployees.push_back(Employee("Oleg", "Sidorenko", "engineer"));
factoryEmployees.push_back(Employee("Denis", "Grigorovich", "engineer"));
factoryEmployees.push_back(Employee("Yuri", "Mamchenko", "engineer"));
factoryEmployees.push_back(Employee("Oleg", "Rybak", "engineer"));
factoryEmployees.push_back(Employee("Andrew", "Semenenko", "technologist"));
factoryEmployees.push_back(Employee("Victor", "Zhukov", "technologist"));
factoryEmployees.push_back(Employee("Artem", "Shevchenko", "technologist"));
factoryEmployees.push_back(Employee("Oleg", "Romanov", "technologist"));
factoryEmployees.push_back(Employee("Ivan", "Dmitrenko", "technologist"));
factoryEmployees.push_back(Employee("Joseph", "Filyuk", "technologist"));
factoryEmployees.push_back(Employee("Roman", "Litvinenko", "technician"));
factoryEmployees.push_back(Employee("Yuri", "Sergienko", "technician"));
factoryEmployees.push_back(Employee("Vladislav", "Pavlenko", "technician"));
factoryEmployees.push_back(Employee("Sergey", "Grigorov", "technician"));
factoryEmployees.push_back(Employee("Anton", "Fedorov", "technician"));
factoryEmployees.push_back(Employee("Nazar", "Korolyov", "technician"));
factoryEmployees.push_back(Employee("Vitaliy", "Yakovenko", "technician"));
factoryEmployees.push_back(Employee("Bogdan", "Kozak", "technician"));
factoryEmployees.push_back(Employee("Vasyl", "Morozov", "technician"));
factoryEmployees.push_back(Employee("Anatoly", "Hordienko", "designer"));
factoryEmployees.push_back(Employee("Yevgen", "Shapovalov", "designer"));
factoryEmployees.push_back(Employee("Mykola", "Klymenko", "designer"));
factoryEmployees.push_back(Employee("Mykola", "Klymenko", "designer"));
factoryEmployees.push_back(Employee("Ivan", "Kovalchuk", "electronics engineer"));
factoryEmployees.push_back(Employee("Petro", "Kravchenko", "electronics engineer"));
factoryEmployees.push_back(Employee("Alexander", "Sidorov", "electronics engineer"));
factoryEmployees.push_back(Employee("Andriy", "Petrov", "electronics engineer"));
factoryEmployees.push_back(Employee("Vasyl", "Semenov", "electronics engineer"));
factoryEmployees.push_back(Employee("Oleg", "Ivanov", "electronics engineer"));
factoryEmployees.push_back(Employee("Ihor", "Sydorenko", "turner"));
factoryEmployees.push_back(Employee("Oleksiy", "Kovalenko", "turner"));
factoryEmployees.push_back(Employee("Andriy", "Petrenko", "turner"));
factoryEmployees.push_back(Employee("Volodymyr", "Semenenko", "turner"));
factoryEmployees.push_back(Employee("Mykhailo", "Ivanenko", "turner"));
factoryEmployees.push_back(Employee("Serhiy", "Petrenko", "turner"));
factoryEmployees.push_back(Employee("Oleg", "Kovalenko", "turner"));
factoryEmployees.push_back(Employee("Vasyl", "Sydorenko", "turner"));
factoryEmployees.push_back(Employee("Petro", "Semenenko", "turner"));
factoryEmployees.push_back(Employee("Ivan", "Petrenko", "turner"));
factoryEmployees.push_back(Employee("Oleksandr", "Ivanenko", "turner"));
factoryEmployees.push_back(Employee("Maxym", "Sydorenko", "turner"));
factoryEmployees.push_back(Employee("Anatoliy", "Kovalenko", "turner"));
factoryEmployees.push_back(Employee("Roman", "Semenenko", "turner"));
factoryEmployees.push_back(Employee("Starodum", "Omelyanenko", "locksmith"));
factoryEmployees.push_back(Employee("Shchek", "Monastyrtskyi", "locksmith"));
factoryEmployees.push_back(Employee("Por", "Petruk", "locksmith"));
factoryEmployees.push_back(Employee("Kornyliy", "Koretskyi", "locksmith"));
factoryEmployees.push_back(Employee("Radoslav", "Zolotarenko", "locksmith"));
factoryEmployees.push_back(Employee("Kalenyk", "Marynych", "locksmith"));
factoryEmployees.push_back(Employee("Illya", "Yuzvenko", "locksmith"));
factoryEmployees.push_back(Employee("Yehor", "Lymaryev", "locksmith"));
factoryEmployees.push_back(Employee("Zlatodan", "Hlushchak", "locksmith"));
factoryEmployees.push_back(Employee("Fedir", "Holubovych", "locksmith"));
factoryEmployees.push_back(Employee("Izyaslav", "Bablyak", "locksmith"));
factoryEmployees.push_back(Employee("Rodoslav", "Shcherbatyuk", "locksmith"));
factoryEmployees.push_back(Employee("Kalenyk", "Karavanskyi", "locksmith"));
factoryEmployees.push_back(Employee("Shamil", "Romanenko", "locksmith"));
factoryEmployees.push_back(Employee("Us", "Horyanskyi", "locksmith"));
factoryEmployees.push_back(Employee("Taras", "Tyahno", "locksmith"));
factoryEmployees.push_back(Employee("Nikodim", "Ohar", "locksmith"));
factoryEmployees.push_back(Employee("Faust", "Bazavluchenko", "locksmith"));
factoryEmployees.push_back(Employee("Khudan", "Kushnirenko", "locksmith"));
factoryEmployees.push_back(Employee("Cheslav", "Angelovich", "locksmith"));
factoryEmployees.push_back(Employee("Kolodiy", "Chepura", "locksmith"));
factoryEmployees.push_back(Employee("Knyazhoslav", "Hudenko", "locksmith"));
factoryEmployees.push_back(Employee("Anastas", "Stepura", "locksmith"));
factoryEmployees.push_back(Employee("Fedir", "Yanchyk", "locksmith"));
factoryEmployees.push_back(Employee("Ulichan", "Burchak", "locksmith"));
factoryEmployees.push_back(Employee("Peremysl", "Matkobozhyk", "locksmith"));
factoryEmployees.push_back(Employee("Vistan", "Rymaruk", "welder"));
factoryEmployees.push_back(Employee("Mstibog", "Baklan", "welder"));
factoryEmployees.push_back(Employee("Ioann", "Bilostotskyi", "welder"));
factoryEmployees.push_back(Employee("Shamil", "Rykhlo", "welder"));
factoryEmployees.push_back(Employee("Khodota", "Stetsiuk", "welder"));
factoryEmployees.push_back(Employee("Khotyan", "Adamskyi", "welder"));
factoryEmployees.push_back(Employee("Kornyliy", "Otroshchenko", "welder"));
factoryEmployees.push_back(Employee("Illya", "Deisun", "welder"));
factoryEmployees.push_back(Employee("Izyaslav", "Lukash", "welder"));
factoryEmployees.push_back(Employee("Yaroslav", "Pakholyuk", "welder"));
factoryEmployees.push_back(Employee("Nazariy", "Sytnyk", "welder"));
factoryEmployees.push_back(Employee("Naslav", "Tryfoniuk", "welder"));
factoryEmployees.push_back(Employee("Emmanuil", "Doni", "welder"));
factoryEmployees.push_back(Employee("Naslav", "Barbon", "welder"));
factoryEmployees.push_back(Employee("Chestyslav", "Ostroushko", "welder"));
factoryEmployees.push_back(Employee("Dobrynia", "Lysytskyi", "welder"));
factoryEmployees.push_back(Employee("Kuybida", "Yermolenko", "welder"));
factoryEmployees.push_back(Employee("Zvenyhor", "Shapovalenko", "welder"));
factoryEmployees.push_back(Employee("Yaropolk", "Symonenko", "welder"));
factoryEmployees.push_back(Employee("Korniy", "Hordasevych", "welder"));
factoryEmployees.push_back(Employee("Yohan", "Ivashchuk", "welder"));
factoryEmployees.push_back(Employee("Kuibida", "Yermolenko", "assembler"));
factoryEmployees.push_back(Employee("Zvenyhor", "Shapovalenko", "assembler"));
factoryEmployees.push_back(Employee("Yaropolk", "Symonenko", "assembler"));
factoryEmployees.push_back(Employee("Korniy", "Hordasevich", "assembler"));
factoryEmployees.push_back(Employee("Yohan", "Ivashchuk", "assembler"));
factoryEmployees.push_back(Employee("Naslav", "Barbon", "assembler"));
factoryEmployees.push_back(Employee("Adam", "Melnik", "assembler"));
departamentEmployees.push_back(Employee("Oleksandr", "Kovalenko", "foreman"));
departamentEmployees.push_back(Employee("Volodymyr", "Polyakov", "foreman"));
departamentEmployees.push_back(Employee("Andriy", "Kravchenko", "collector"));
departamentEmployees.push_back(Employee("Vitaliy", "Morozov", "collector"));
departamentEmployees.push_back(Employee("Andriy", "Kravchenko", "collector"));
departamentEmployees.push_back(Employee("Mykhailo", "Bondarenko", "collector"));
departamentEmployees.push_back(Employee("Pavlo", "Marchenko", "collector"));
departamentEmployees.push_back(Employee("Volodymyr", "Kozlov", "collector"));
departamentEmployees.push_back(Employee("Viktor", "Hrytsenko", "collector"));
departamentEmployees.push_back(Employee("Oleg", "Shevchenko", "engineer"));
departamentEmployees.push_back(Employee("Vitaliy", "Miroshnichenko", "engineer"));
departamentEmployees.push_back(Employee("Oleksandr", "Petrov", "engineer"));
departamentEmployees.push_back(Employee("Iryna", "Kovalchuk", "technologist"));
departamentEmployees.push_back(Employee("Andriy", "Semenenko", "technologist"));
departamentEmployees.push_back(Employee("Roman", "Lytvynenko", "technician"));
departamentEmployees.push_back(Employee("Yuriy", "Serhiienko", "technician"));
departamentEmployees.push_back(Employee("Vladyslav", "Pavlenko", "technician"));
departamentEmployees.push_back(Employee("Vasyl", "Bilozir", "technician"));
departamentEmployees.push_back(Employee("Kuibida", "Yermolenko", "assembler"));
departamentEmployees.push_back(Employee("Zvenyhor", "Shapovalenko", "assembler"));
departamentEmployees.push_back(Employee("Vistan", "Rymaruk", "welder"));
departamentEmployees.push_back(Employee("Mstiboh", "Baklan", "welder"));
departamentEmployees.push_back(Employee("Ioann", "Bilostotskyi", "welder"));
departamentEmployees.push_back(Employee("Shamil", "Rykhlo", "welder"));
departamentEmployees.push_back(Employee("Khodota", "Stetsiuk", "welder"));
departamentEmployees.push_back(Employee("Khotyan", "Adamskyi", "welder"));
departamentEmployees.push_back(Employee("Korniliy", "Otroshchenko", "welder"));
departamentEmployees.push_back(Employee("Illia", "Deisun", "welder"));
departamentEmployees.push_back(Employee("Izyaslav", "Lukash", "welder"));
departamentEmployees.push_back(Employee("Starodum", "Omelyanenko", "locksmith"));
departamentEmployees.push_back(Employee("Shchek", "Monastiretskyi", "locksmith"));
departamentEmployees.push_back(Employee("Por", "Petruk", "locksmith"));
departamentEmployees.push_back(Employee("Korniliy", "Koretskyi", "locksmith"));
departamentEmployees.push_back(Employee("Radoslav", "Zolotarenko", "locksmith"));
departamentEmployees.push_back(Employee("Kalenyk", "Marenich", "locksmith"));
departamentEmployees.push_back(Employee("Illia", "Yuzvenko", "locksmith"));
departamentEmployees.push_back(Employee("Yehor", "Lymarev", "locksmith"));
departamentEmployees.push_back(Employee("Ihor", "Sydorenko", "turner"));
departamentEmployees.push_back(Employee("Oleksiy", "Kovalenko", "turner"));
departamentEmployees.push_back(Employee("Andriy", "Petrenko", "turner"));
departamentEmployees.push_back(Employee("Volodymyr", "Semenenko", "turner"));
departamentEmployees.push_back(Employee("Mykhailo", "Ivanenko", "turner"));
departamentEmployees.push_back(Employee("Anatoliy", "Hordienko", "designer"));
departamentEmployees.push_back(Employee("Ivan", "Kovalchuk", "electronics technician"));
departamentEmployees.push_back(Employee("Petro", "Kravchenko", "electronics technician"));
engineeringStaff.push_back(Employee("Vitaliy", "Miroshnichenko", "engineer"));
engineeringStaff.push_back(Employee("Oleksandr", "Petrov", "engineer"));
engineeringStaff.push_back(Employee("Mykhailo", "Ivanov", "engineer"));
engineeringStaff.push_back(Employee("Oleg", "Sydorenko", "engineer"));
engineeringStaff.push_back(Employee("Denys", "Hryhorovych", "engineer"));
engineeringStaff.push_back(Employee("Yuriy", "Mamchenko", "engineer"));
engineeringStaff.push_back(Employee("Oleg", "Rybak", "engineer"));
engineeringStaff.push_back(Employee("Andriy", "Semenenko", "technologist"));
engineeringStaff.push_back(Employee("Viktor", "Zhukov", "technologist"));
engineeringStaff.push_back(Employee("Artem", "Shevchenko", "technologist"));
engineeringStaff.push_back(Employee("Oleg", "Romanov", "technologist"));
engineeringStaff.push_back(Employee("Ivan", "Dmytrenko", "technologist"));
engineeringStaff.push_back(Employee("Roman", "Lytvynenko", "technician"));
engineeringStaff.push_back(Employee("Yuriy", "Serhiienko", "technician"));
engineeringStaff.push_back(Employee("Vladyslav", "Pavlenko", "technician"));
engineeringStaff.push_back(Employee("Serhiy", "Hryhorov", "technician"));
engineeringStaff.push_back(Employee("Anton", "Fedorov", "technician"));
engineeringStaff.push_back(Employee("Nazar", "Koroliov", "technician"));
engineeringStaff.push_back(Employee("Vitaliy", "Yakovenko", "technician"));
engineeringStaff.push_back(Employee("Bohdan", "Kozak", "technician"));
engineeringStaff.push_back(Employee("Vasyl", "Morozov", "technician"));
engineeringStaff.push_back(Employee("Anatoliy", "Hordienko", "designer"));
engineeringStaff.push_back(Employee("Yevhen", "Shapovalov", "designer"));
engineeringStaff.push_back(Employee("Mykola", "Klymenko", "designer"));
engineeringStaff.push_back(Employee("Mykola", "Klymenko", "designer"));
engineeringStaff.push_back(Employee("Ivan", "Kovalchuk", "electronics engineer"));
engineeringStaff.push_back(Employee("Petro", "Kravchenko", "electronics engineer"));
engineeringStaff.push_back(Employee("Oleksandr", "Sydorov", "electronics engineer"));
engineeringStaff.push_back(Employee("Andriy", "Petrov", "electronics engineer"));
engineeringStaff.push_back(Employee("Vasyl", "Semenov", "electronics engineer"));
engineeringStaff.push_back(Employee("Oleg", "Ivanov", "electronics engineer"));
workers.push_back(Employee("Igor", "Sydorenko", "turner"));
workers.push_back(Employee("Oleksiy", "Kovalenko", "turner"));
workers.push_back(Employee("Andriy", "Petrenko", "turner"));
workers.push_back(Employee("Volodymyr", "Semenenko", "turner"));
workers.push_back(Employee("Mykhailo", "Ivanenko", "turner"));
workers.push_back(Employee("Serhiy", "Petrenko", "turner"));
workers.push_back(Employee("Oleg", "Kovalenko", "turner"));
workers.push_back(Employee("Vasyl", "Sydorenko", "turner"));
workers.push_back(Employee("Petro", "Semenenko", "turner"));
workers.push_back(Employee("Ivan", "Petrenko", "turner"));
workers.push_back(Employee("Oleksandr", "Ivanenko", "turner"));
workers.push_back(Employee("Maxym", "Sydorenko", "turner"));
workers.push_back(Employee("Anatoliy", "Kovalenko", "turner"));
workers.push_back(Employee("Roman", "Semenenko", "turner"));
workers.push_back(Employee("Starodum", "Omelyanenko", "locksmith"));
workers.push_back(Employee("Shchek", "Monastyrtskyi", "locksmith"));
workers.push_back(Employee("Por", "Petruk", "locksmith"));
workers.push_back(Employee("Kornyliy", "Koretskyi", "locksmith"));
workers.push_back(Employee("Radoslav", "Zolotarenko", "locksmith"));
workers.push_back(Employee("Kalenyk", "Marynych", "locksmith"));
workers.push_back(Employee("Illya", "Yuzvenko", "locksmith"));
workers.push_back(Employee("Yehor", "Lymaryev", "locksmith"));
workers.push_back(Employee("Zlatodan", "Hlushchak", "locksmith"));
workers.push_back(Employee("Fedir", "Holubovych", "locksmith"));
workers.push_back(Employee("Izyaslav", "Bablyak", "locksmith"));
workers.push_back(Employee("Rodoslav", "Shcherbatyuk", "locksmith"));
workers.push_back(Employee("Kalenyk", "Karavanskyi", "locksmith"));
workers.push_back(Employee("Shamil", "Romanenko", "locksmith"));
workers.push_back(Employee("Us", "Horyanskyi", "locksmith"));
workers.push_back(Employee("Taras", "Tyahno", "locksmith"));
workers.push_back(Employee("Nikodim", "Ohar", "locksmith"));
workers.push_back(Employee("Faust", "Bazavluchenko", "locksmith"));
workers.push_back(Employee("Khudan", "Kushnirenko", "locksmith"));
workers.push_back(Employee("Cheslav", "Angelovich", "locksmith"));
workers.push_back(Employee("Kolodiy", "Chepura", "locksmith"));
workers.push_back(Employee("Knyazhoslav", "Hudenko", "locksmith"));
workers.push_back(Employee("Anastas", "Stepura", "locksmith"));
workers.push_back(Employee("Fedir", "Yanchyk", "locksmith"));
workers.push_back(Employee("Ulichan", "Burchak", "locksmith"));
workers.push_back(Employee("Peremysl", "Matkobozhyk", "locksmith"));
workers.push_back(Employee("Vistan", "Rymaruk", "welder"));
workers.push_back(Employee("Mstibog", "Baklan", "welder"));
workers.push_back(Employee("Ioann", "Bilostotskyi", "welder"));
workers.push_back(Employee("Shamil", "Rykhlo", "welder"));
workers.push_back(Employee("Khodota", "Stetsiuk", "welder"));
workers.push_back(Employee("Khotyan", "Adamskyi", "welder"));
workers.push_back(Employee("Kornyliy", "Otroshchenko", "welder"));
workers.push_back(Employee("Illya", "Deisun", "welder"));
workers.push_back(Employee("Izyaslav", "Lukash", "welder"));
workers.push_back(Employee("Yaroslav", "Pakholyuk", "welder"));
workers.push_back(Employee("Nazariy", "Sytnyk", "welder"));
workers.push_back(Employee("Naslav", "Tryfoniuk", "welder"));
workers.push_back(Employee("Emmanuil", "Doni", "welder"));
workers.push_back(Employee("Naslav", "Barbon", "welder"));
workers.push_back(Employee("Chestyslav", "Ostroushko", "welder"));
workers.push_back(Employee("Dobrynia", "Lysytskyi", "welder"));
workers.push_back(Employee("Kuybida", "Yermolenko", "welder"));
workers.push_back(Employee("Zvenyhor", "Shapovalenko", "welder"));
workers.push_back(Employee("Yaropolk", "Symonenko", "welder"));
workers.push_back(Employee("Korniy", "Hordasevych", "welder"));
workers.push_back(Employee("Yohan", "Ivashchuk", "welder"));
workers.push_back(Employee("Kuybida", "Yermolenko", "installer"));
workers.push_back(Employee("Zvenyhor", "Shapovalenko", "installer"));
workers.push_back(Employee("Yaropolk", "Symonenko", "installer"));
workers.push_back(Employee("Korniy", "Hordasevych", "installer"));
workers.push_back(Employee("Yohan", "Ivashchuk", "installer"));
workers.push_back(Employee("Naslav", "Barbon", "installer"));
    int cchoice;
do {
    cout << "\nSelect an option:\n";
    cout << "1. Get data on the staffing of the factory\n";
    cout << "2. Get data on the staffing of the departments\n";
    cout << "3. Get data on the staffing of the department 1\n";
    cout << "4. Get data on the staffing of the department 2\n";
    cout << "5. Get data on the staffing of the department 3\n";
    cout << "6. Get data on the staffing of the selected category of the department 1\n";
    cout << "7. Get data on the staffing of the selected category of the department 2\n";
    cout << "8. Get data on the staffing of the selected category of the department 3\n";
    cout << "9. Exit the program\n";
    cin >> cchoice;
    cout << endl;
    switch (cchoice) {
    case 1:
        cout << "Personnel of the factory:\n";
    for (size_t i = 0; i < factoryEmployees.size(); ++i) {
        factoryEmployees[i].displayInfo();
    }
    cout << endl;
        break;
    case 2:
        cout << "Personnel of the departments:\n";
    for (size_t i = 0; i < departamentEmployees.size(); ++i) {
    departamentEmployees[i].displayInfo();
    }
    cout << endl;
        break;
    case 3:
        cout << "Personnel of the department 1:\n";
    for (size_t i = 0; i < departamentEmployees.size() - 38; ++i) {
    departamentEmployees[i].displayInfo();
    }
    cout << endl;
        break;
    case 4:
        cout << "Personnel of the department 2:\n";
    for (size_t i = 8; i < departamentEmployees.size() - 31; ++i) {
    departamentEmployees[i].displayInfo();
    }
    cout << endl;
        break;
    case 5:
        cout << "Personnel of the department 3:\n";
    for (size_t i = 15; i < departamentEmployees.size() - 23; ++i) {
    departamentEmployees[i].displayInfo();
    }
    cout << endl;
        break;
    case 6:
        while(true){
            cout << "\nEnter the category index (from 0 to 1) to get data about the personnel of the department 1: ";
            int catIndex;
            cin >> catIndex;
            if(catIndex == -1){
                break;
            }
            else if(catIndex == 0){
                cout << "Personnel of the department 1:\n";
                for (size_t i = 8; i < departamentEmployees.size() - 35; ++i) {
                departamentEmployees[i].displayInfo();
                }
                cout << endl;
            }
            else if(catIndex == 1){
                cout << "Personnel of the department 1:\n";
                for (size_t i = 40; i < departamentEmployees.size() - 2; ++i) {
                departamentEmployees[i].displayInfo();
                }
                cout << endl;
            }
            else {
                cout << "Invalid category index";
            }
        }
        break;
    case 7:
        while(true){
            cout << "\nEnter the category index (from 0 to 1) to get data about the personnel of the department 2: ";
            int catIndex;
            cin >> catIndex;
            if(catIndex == -1){
                break;
            }
            else if(catIndex == 0){
                cout << "Personnel of the department 2:\n";
                for (size_t i = 15; i < departamentEmployees.size() - 26; ++i) {
                departamentEmployees[i].displayInfo();
                }
                cout << endl;
            }
            else if(catIndex == 1){
                cout << "Personnel of the department 2:\n";
                for (size_t i = 24; i < departamentEmployees.size() - 18; ++i) {
                departamentEmployees[i].displayInfo();
                }
                cout << endl;
            }
            else {
                cout << "Invalid category index";
            }
        }
        break;
    case 8:
        while(true){
            cout << "\nEnter the category index (from 0 to 1) to get data about the personnel of the department 3: ";
            int catIndex;
            cin >> catIndex;
            if(catIndex == -1){
                break;
            }
            else if(catIndex == 0){
                cout << "Personnel of the department 3:\n";
                for (size_t i = 33; i < departamentEmployees.size() - 10; ++i) {
                departamentEmployees[i].displayInfo();
                }
                cout << endl;
            }
            else if(catIndex == 1){
                cout << "Personnel of the department 3:\n";
                for (size_t i = 42; i < departamentEmployees.size(); ++i) {
                departamentEmployees[i].displayInfo();
                }
                cout << endl;
            }
            else {
                cout << "Invalid category index";
            }
        }
        break;
    case 9:
        cout << "Work on the program has been completed\n";
        break;
    default:
        cout << "Invalid option entered. Try again\n";
        break;
    }
} while (cchoice != 9);
continue;
}
else if(mainChoice == 4){
    Region region1("Region 1");
    Region region2("Region 2");
    Region region3("Region 3");
    Region region4("Region 4");
    Region region5("Region 5");
    Region region6("Region 6");
Departament departament1("Department1", {region1, region2});
Departament departament2("Department1", {region3, region4});
Departament departament3("Department1", {region5, region6});
RegionChief regionChief1("Petro", "Ivanov", region1);
RegionChief regionChief2("Bohdan", "Kozak", region2);
RegionChief regionChief3("Oleksandr", "Sydorov", region3);
RegionChief regionChief4("Yuri", "Serhiienko", region4);
RegionChief regionChief5("Andrii", "Semenenko", region5);
RegionChief regionChief6("Oleksandr", "Miroshnychenko", region6);
cout << "\n\n";
int cchoicee;
do {
    cout << "\nSelect an option:\n";
    cout << "1. Get the number and list of regions of the specified department in as a whole and their chiefs\n";
    cout << "2. Get the number and list of regions of the factory in as a whole and their chiefs\n";
    cout << "3. Exit the program\n";
    cin >> cchoicee;
    cout << endl;
    switch (cchoicee) {
    case 1:
        while(true){
cout << "\nEnter the department index (0 to 2) to get the sections of this department, the number, and their chiefs: ";
int depIndex;
cin >> depIndex;
if(depIndex == -1){
    break;
}
else if(depIndex == 0){
    cout << "The number of regions in the Department 1: " << departament1.regions.size() << endl;
    cout << "The list of Department 1:" << endl;
    for (size_t i = 0; i < departament1.regions.size(); ++i) {
    cout << "Region: " << departament1.regions[i].name << endl;
    if (i == 0){
    cout << "Chief: " << regionChief1.firstName << " " << regionChief1.lastName << endl;
    }
    else if (i == 1){
    cout << "Chief: " << regionChief2.firstName << " " << regionChief2.lastName << endl;
    }
    }
    }
    else if(depIndex == 1){
    cout << "The number of regions in the Department 2: " << departament2.regions.size() << endl;
    cout << "The list of Department 2:" << endl;
    for (size_t i = 0; i < departament2.regions.size(); ++i) {
    cout << "Region: " << departament2.regions[i].name << endl;
    if (i == 0){
    cout << "Chief: " << regionChief3.firstName << " " << regionChief3.lastName << endl;
    }
    else if (i == 1){
    cout << "Chief: " << regionChief4.firstName << " " << regionChief4.lastName << endl;
    }
    }
    }
    else if(depIndex == 2){
    cout << "The number of regions in the Department 3: " << departament3.regions.size() << endl;
    cout << "The list of Department 3:" << endl;
    for (size_t i = 0; i < departament3.regions.size(); ++i) {
    cout << "Region: " << departament3.regions[i].name << endl;
    if (i == 0){
    cout << "Chief: " << regionChief5.firstName << " " << regionChief5.lastName << endl;
    }
    else if (i == 1){
    cout << "Chief: " << regionChief6.firstName << " " << regionChief6.lastName << endl;
    }
    }
    }
    else {
        cout << "Invalid index of department!";
    }
}
        break;
    case 2:
        cout << endl;
cout << "Number of enterprise regions: " << departament1.regions.size() + departament2.regions.size() + departament3.regions.size()<< endl;
cout << "List of enterprise regions and their chiefs:" << endl;
for (size_t i = 0; i < departament1.regions.size(); ++i) {
cout << "Region: " << departament1.regions[i].name << endl;
if (i == 0){
cout << "Chief: " << regionChief1.firstName << " " << regionChief1.lastName << endl;
}
else if (i == 1){
cout << "Chief: " << regionChief2.firstName << " " << regionChief2.lastName << endl;
}
}
for (size_t i = 0; i < departament2.regions.size(); ++i) {
cout << "Region: " << departament2.regions[i].name << endl;
if (i == 0){
cout << "Chief: " << regionChief3.firstName << " " << regionChief3.lastName << endl;
}
else if (i == 1){
cout << "Chief: " << regionChief4.firstName << " " << regionChief4.lastName << endl;
}
}
for (size_t i = 0; i < departament3.regions.size(); ++i) {
cout << "Region: " << departament3.regions[i].name << endl;
if (i == 0){
cout << "Chief: " << regionChief5.firstName << " " << regionChief5.lastName << endl;
}
else if (i == 1){
cout << "Chief: " << regionChief6.firstName << " " << regionChief6.lastName << endl;
}
}
break;
    default:
        cout << "Invalid option entered. Try again\n";
        break;
    }
} while (cchoicee != 3);
continue;
}
else if (mainChoice == 5){
CategoryProduct truckProduct("Trucks");
truckProduct.addWork("Mechanical treatment of trucks");
truckProduct.addWork("Truck chassis assembly");
truckProduct.addWork("Engine installation for trucks");
truckProduct.addWork("Installation of truck transmissions");
truckProduct.addWork("Installation of electrical systems");
truckProduct.addWork("Body assembly");
truckProduct.addWork("Installation of loading and unloading system");
truckProduct.addWork("Painting");
CategoryProduct carProduct("Cars");
carProduct.addWork("Development of body and chassis design");
carProduct.addWork("Engine selection and integration");
carProduct.addWork("Development of electrical and electronic systems");
carProduct.addWork("Production of components and subsystems");
carProduct.addWork("Assembly and installation");
carProduct.addWork("Transmission installation");
carProduct.addWork("Painting");
CategoryProduct busProduct("Busses");
busProduct.addWork("Mechanical processing");
busProduct.addWork("Chassis assembly");
busProduct.addWork("Engine installation");
busProduct.addWork("Transmission installation");
busProduct.addWork("Electrical systems installation");
busProduct.addWork("Interior assembly");
busProduct.addWork("Painting");
CategoryProduct cultMachineProduct("agriculturalMachinery");
cultMachineProduct.addWork("Installation of the chassis");
cultMachineProduct.addWork("Production of structural elements");
cultMachineProduct.addWork("Engine installation");
cultMachineProduct.addWork("Carrying out tests and inspections of the machine");
cultMachineProduct.addWork("Installation of interior upholstery and interior production");
cultMachineProduct.addWork("Installation of electrical and electronic systems");
cultMachineProduct.addWork("Painting");
CategoryProduct roadConstrProduct("RoadConstructionMachines");
roadConstrProduct.addWork("Engineering calculations");
roadConstrProduct.addWork("Fabrication and integration of core components");
roadConstrProduct.addWork("Testing");
roadConstrProduct.addWork("Logistics and delivery of road construction machines");
roadConstrProduct.addWork("Assembly and installation");
roadConstrProduct.addWork("After-sales service, repair");
roadConstrProduct.addWork("Painting");
CategoryProduct motorcycleProduct("Motorcycles");
motorcycleProduct.addWork("Production of the frame and main components");
motorcycleProduct.addWork("Engine and transmission installation");
motorcycleProduct.addWork("Installation of suspension and wheels");
motorcycleProduct.addWork("Installation of electrical system and lighting equipment");
motorcycleProduct.addWork("Installation of the brake system");
motorcycleProduct.addWork("Assembly of the body and upholstery");
motorcycleProduct.addWork("Inspection and testing of all systems and nodes");
motorcycleProduct.addWork("Painting and finishing the exterior decoration");
motorcycleProduct.addWork("Final quality check and ready for use");
cout << "\n\n";
while(true){
    int catIndex;
    cout << "Enter the category index (0 to 5) to get a list of work done on this product: ";
    cin >> catIndex;
    if(catIndex == -1){
        break;
    }
    else if(catIndex == 0){
        truckProduct.displayWorkList();
        cout << "\n";
    }
    else if(catIndex == 1){
        carProduct.displayWorkList();
        cout << "\n";
    }
    else if(catIndex == 2){
        busProduct.displayWorkList();
        cout << "\n";
    }
    else if(catIndex == 3){
        cultMachineProduct.displayWorkList();
        cout << "\n";
    }
    else if(catIndex == 4){
        roadConstrProduct.displayWorkList();
        cout << "\n";
    }
    else if(catIndex == 5){
        motorcycleProduct.displayWorkList();
        cout << "\n";
    }
    else {
        cout << "Invalide category index!";
    }
}
continue;
}
else if(mainChoice == 6){
do {
    cout << "\nSelect an option:\n";
    cout << "1. Get the composition of the brigades and masters of region 1\n";
    cout << "2. Get the composition of the brigades and masters of region 2\n";
    cout << "3. Get the composition of the brigades and masters of region 3\n";
    cout << "4. Get the composition of the brigades and masters of region 4\n";
    cout << "5. Get the composition of the brigades and masters of region 5\n";
    cout << "6. Get the composition of the brigades and masters of region 6\n";
    cout << "7. Get the composition of the brigades and masters of department 1\n";
    cout << "8. Get the composition of the brigades and masters of department 2\n";
    cout << "9. Get the composition of the brigades and masters of department 3\n";
    cout << "10. Exit the program\n";
    cin >> cchoice2;
    cout << endl;
    switch (cchoice2) {
    case 1:
        brigade1->printInfo();
        mastersOfRegion1 = brigade1->getMastersOfRegion();
        cout << "\nMasters of Region 1:" << endl;
        for (size_t i = 0; i < mastersOfRegion1.size(); ++i) {
            mastersOfRegion1[i]->printInfo();
        }
        break;
    case 2:
        brigade2->printInfo();
        mastersOfRegion2 = brigade2->getMastersOfRegion();
        cout << "\nMasters of Region 2:" << endl;
        for (size_t i = 0; i < mastersOfRegion2.size(); ++i) {
            mastersOfRegion2[i]->printInfo();
        }
        break;
    case 3:
        brigade3->printInfo();
        mastersOfRegion3 = brigade3->getMastersOfRegion();
        cout << "\nMasters of Region 3:" << endl;
        for (size_t i = 0; i < mastersOfRegion3.size(); ++i) {
            mastersOfRegion3[i]->printInfo();
        }
        break;
    case 4:
        brigade4->printInfo();
        mastersOfRegion4 = brigade4->getMastersOfRegion();
        cout << "\nMasters of Region 4:" << endl;
        for (size_t i = 0; i < mastersOfRegion4.size(); ++i) {
            mastersOfRegion4[i]->printInfo();
        }
break;
    case 5:
        brigade5->printInfo();
        mastersOfRegion5 = brigade5->getMastersOfRegion();
        cout << "\nMasters of Region 5:" << endl;
        for (size_t i = 0; i < mastersOfRegion5.size(); ++i) {
            mastersOfRegion5[i]->printInfo();
        }
        break;
    case 6:
        brigade6->printInfo();
        mastersOfRegion6 = brigade6->getMastersOfRegion();
        cout << "\nMasters of Region 6:" << endl;
        for (size_t i = 0; i < mastersOfRegion6.size(); ++i) {
            mastersOfRegion6[i]->printInfo();
        }
        break;
    case 7:
        department1->printInfo();
break;
    case 8:
        department2->printInfo();
break;
    case 9:
        department3->printInfo();
break;
    case 10:
break;
    default:
        cout << "Invalid option entered. Try again\n";
    }
} while (cchoice2 != 10);
cout << endl;
continue;
}
else if (mainChoice == 7){
    int choice2;
do {
    cout << "\nChoose an option:\n";
    cout << "1. A list of all categories and products of the enterprise that are currently being assembled\n";
    cout << "2. A list of all products and categories of department 1 that are currently being assembled\n";
    cout << "3. A list of all products and categories of department 2 that are currently being assembled\n";
    cout << "4. A list of all products and categories of department 3 that are currently being assembled\n";
    cout << "5. A list of all products and categories of region 1 that are currently being assembled\n";
    cout << "6. A list of all products and categories of region 2 that are currently being assembled\n";
    cout << "7. A list of all products and categories of region 3 that are currently being assembled\n";
    cout << "8. A list of all products and categories of region 4 that are currently being assembled\n";
    cout << "9. A list of all products and categories of region 5 that are currently being assembled\n";
    cout << "10. A list of all products and categories of region 6 that are currently being assembled\n";
    cout << "11. List of products of the selected enterprise category that are currently being assembled\n";
    cout << "12. List of products of the selected department 1 category that are currently being assembled\n";
    cout << "13. List of products of the selected department 2 category that are currently being assembled\n";
    cout << "14. List of products of the selected department 3 category that are currently being assembled\n";
    cout << "15. Exit the program\n";
    cin >> choice2;
    switch (choice2) {
    case 1:
        db.printProductsOfFactoryAtThisMoment();
        break;
    case 2:
        db.printProductsOfDepartament1AtThisMoment();
        break;
    case 3:
        db.printProductsOfDepartament2AtThisMoment();
        break;
    case 4:
        db.printProductsOfDepartament3AtThisMoment();
        break;
    case 5:
        db.printProductsOfRegion1AtThisMoment();
        break;
    case 6:
        db.printProductsOfRegion2AtThisMoment();
        break;
    case 7:
        db.printProductsOfRegion3AtThisMoment();
        break;
    case 8:
        db.printProductsOfRegion4AtThisMoment();
        break;
    case 9:
        db.printProductsOfRegion5AtThisMoment();
        break;
    case 10:
        db.printProductsOfRegion6AtThisMoment();
        break;
    case 11:
        db.printCategoryOfFactoryByIndexAtThisMoment();
        break;
    case 12:
        db.printCategoryOfDepartament1ByIndexAtThisMoment();
        break;
    case 13:
        db.printCategoryOfDepartament2ByIndexAtThisMoment();
        break;
    case 14:
        db.printCategoryOfDepartament3ByIndexAtThisMoment();
        break;
    case 15:
        cout << "Work on the program has been completed\n";
        break;
    default:
        cout << "Invalid option entered. Try again\n";
    }
} while (choice2 != 15);
continue;
}
else if (mainChoice == 8){
int indexOfProduct;
    cout << "\n\n";
    while(true){
    cout << "\nEnter an index from 0 to 5 to get the composition of crews involved in the assembly of the specified product, or enter -1 to \nexit: ";
    int indexOfProduct;
    cin >> indexOfProduct;
    if(indexOfProduct == -1){
        break;
    }
    else{
        if(indexOfProduct == 0){
            cout << "The composition of the teams participating in the assembly of the product: " << db.categories[indexOfProduct].name << endl;
            brigade3->printInfo();
            brigade4->printInfo();
        }
        else if(indexOfProduct == 1){
            cout << "The composition of the teams participating in the assembly of the product: " << db.categories[indexOfProduct].name << endl;
            brigade1->printInfo();
            brigade2->printInfo();
        }
        else if (indexOfProduct == 2){
            cout << "The composition of the teams participating in the assembly of the product: " << db.categories[indexOfProduct].name << endl;
            brigade3->printInfo();
            brigade4->printInfo();
        }
        else if (indexOfProduct == 3){
            cout << "The composition of the teams participating in the assembly of the product: " << db.categories[indexOfProduct].name << endl;
            brigade5->printInfo();
            brigade6->printInfo();
        }
        else if (indexOfProduct == 4){
            cout << "The composition of the teams participating in the assembly of the product: " << db.categories[indexOfProduct].name << endl;
            brigade5->printInfo();
            brigade6->printInfo();
        }
        else if (indexOfProduct == 5){
            cout << "The composition of the teams participating in the assembly of the product: " << db.categories[indexOfProduct].name << endl;
            brigade1->printInfo();
            brigade2->printInfo();
        }
        else {
            cout << "Index entered incorrectly!\n";
        }
    }
    }
    delete brigade1;
    delete brigade2;
    delete brigade3;
    delete brigade4;
    delete brigade5;
    delete brigade6;
continue;
}
else if (mainChoice == 9){
    Laboratory laboratory;
    laboratory.addLaboratory("Laboratory 1");
    laboratory.addLaboratory("Laboratory 2");
    laboratory.addLaboratory("Laboratory 3");
    laboratory.addLaboratory("Laboratory 4");
    laboratory.addLaboratory("Laboratory 5");
    laboratory.addLaboratory("Laboratory 6");
    int choiceCategory;
    cout << "\n\n";
    while(true){
    cout << "\nEnter an index from 0 to 5 to get a list of testing laboratories participating in the testing of a \nspecific product, or -1 to exit: ";
    int choiceCategory;
    cin >> choiceCategory;
    if(choiceCategory == -1){
        break;
    }
    else{
        if(choiceCategory == 0){
            cout << "List of testing laboratories participating in product testing: " << db.categories[choiceCategory].name << endl;
            laboratory.cat1();
        }
        else if(choiceCategory == 1){
            cout << "List of testing laboratories participating in product testing: " << db.categories[choiceCategory].name << endl;
            laboratory.cat2();
        }
        else if (choiceCategory == 2){
            cout << "List of testing laboratories participating in product testing: " << db.categories[choiceCategory].name << endl;
            laboratory.cat3();
        }
        else if (choiceCategory == 3){
            cout << "List of testing laboratories participating in product testing: " << db.categories[choiceCategory].name << endl;
            laboratory.cat4();
        }
        else if (choiceCategory == 4){
            cout << "List of testing laboratories participating in product testing: " << db.categories[choiceCategory].name << endl;
            laboratory.cat5();
        }
        else if (choiceCategory == 5){
            cout << "List of testing laboratories participating in product testing: " << db.categories[choiceCategory].name << endl;
            laboratory.cat6();
        }
        else {
            cout << "Index entered incorrectly!\n";
        }
    }
    }
continue;
}
else if (mainChoice == 10){
    Laboratory laboratory;
    laboratory.addLaboratory("Laboratory 1");
    laboratory.addLaboratory("Laboratory 2");
    laboratory.addLaboratory("Laboratory 3");
    laboratory.addLaboratory("Laboratory 4");
    laboratory.addLaboratory("Laboratory 5");
    laboratory.addLaboratory("Laboratory 6");
    Factory ffactory;
    ffactory.addProductLaboratories(ProductByDate("trucks:  ", ""));
    ffactory.addProductLaboratories(ProductByDate("Kamaz", ""));
    ffactory.addProductLaboratories(ProductByDate("MAN", ""));
    ffactory.addProductLaboratories(ProductByDate("MAN", ""));
    ffactory.addProductLaboratories(ProductByDate("Volvo", ""));
    ffactory.addProductLaboratories(ProductByDate("Volvo", ""));
    ffactory.addProductLaboratories(ProductByDate("Volvo", ""));
    ffactory.addProductLaboratories(ProductByDate("Ural", ""));
    ffactory.addProductLaboratories(ProductByDate("DAF", ""));
    ffactory.addProductLaboratories(ProductByDate("DAF", ""));
    ffactory.addProductLaboratories(ProductByDate("DAF", ""));
    ffactory.addProductLaboratories(ProductByDate("\nCars:  ", ""));
    ffactory.addProductLaboratories(ProductByDate("Ford", ""));
    ffactory.addProductLaboratories(ProductByDate("Ford", ""));
    ffactory.addProductLaboratories(ProductByDate("Ford", ""));
    ffactory.addProductLaboratories(ProductByDate("Toyota", ""));
    ffactory.addProductLaboratories(ProductByDate("Toyota", ""));
    ffactory.addProductLaboratories(ProductByDate("Dodge", ""));
    ffactory.addProductLaboratories(ProductByDate("BMW", ""));
    ffactory.addProductLaboratories(ProductByDate("Dodge", ""));
    ffactory.addProductLaboratories(ProductByDate("Dodge", ""));
    ffactory.addProductLaboratories(ProductByDate("Fiat", ""));
    ffactory.addProductLaboratories(ProductByDate("Fiat", ""));
    ffactory.addProductLaboratories(ProductByDate("Audi", ""));
    ffactory.addProductLaboratories(ProductByDate("Audi", ""));
    ffactory.addProductLaboratories(ProductByDate("Audi", ""));
    ffactory.addProductLaboratories(ProductByDate("Audi", ""));
    ffactory.addProductLaboratories(ProductByDate("\nBusses:  ", ""));
    ffactory.addProductLaboratories(ProductByDate("Mercedes-Benz", ""));
    ffactory.addProductLaboratories(ProductByDate("Mercedes-Benz", ""));
    ffactory.addProductLaboratories(ProductByDate("Isuzu", ""));
    ffactory.addProductLaboratories(ProductByDate("Isuzu", ""));
    ffactory.addProductLaboratories(ProductByDate("Iris", ""));
    ffactory.addProductLaboratories(ProductByDate("Isuzu", ""));
    ffactory.addProductLaboratories(ProductByDate("Youtong", ""));
    ffactory.addProductLaboratories(ProductByDate("\nAgricultural machinery:  ", ""));
    ffactory.addProductLaboratories(ProductByDate("Challenger", ""));
    ffactory.addProductLaboratories(ProductByDate("Challenger", ""));
    ffactory.addProductLaboratories(ProductByDate("Challenger", ""));
    ffactory.addProductLaboratories(ProductByDate("Kubota", ""));
    ffactory.addProductLaboratories(ProductByDate("Kubota", ""));
    ffactory.addProductLaboratories(ProductByDate("Kubota", ""));
    ffactory.addProductLaboratories(ProductByDate("JCB", ""));
    ffactory.addProductLaboratories(ProductByDate("JCB", ""));
    ffactory.addProductLaboratories(ProductByDate("\nRoad construction machines:  ", ""));
    ffactory.addProductLaboratories(ProductByDate("Caterpillar", ""));
    ffactory.addProductLaboratories(ProductByDate("Caterpillar", ""));
    ffactory.addProductLaboratories(ProductByDate("Caterpillar", ""));
    ffactory.addProductLaboratories(ProductByDate("Liebherr", ""));
    ffactory.addProductLaboratories(ProductByDate("Liebherr", ""));
    ffactory.addProductLaboratories(ProductByDate("Terex", ""));
    ffactory.addProductLaboratories(ProductByDate("Terex", ""));
    ffactory.addProductLaboratories(ProductByDate("\nMotorcycles:  ", ""));
    ffactory.addProductLaboratories(ProductByDate("Lifan", ""));
    ffactory.addProductLaboratories(ProductByDate("Lifan", ""));
    ffactory.addProductLaboratories(ProductByDate("Lifan", ""));
    ffactory.addProductLaboratories(ProductByDate("Honda", ""));
    ffactory.addProductLaboratories(ProductByDate("Geon", ""));
    ffactory.addProductLaboratories(ProductByDate("Honda", ""));
    ffactory.addProductLaboratories(ProductByDate("Yamaha", ""));
    ffactory.addProductLaboratories(ProductByDate("Yamaha", ""));
    ffactory.addProductLaboratories(ProductByDate("Ducati", ""));
    ffactory.addProductLaboratories(ProductByDate("Suzuki", ""));
    ffactory.addProductLaboratories(ProductByDate("Suzuki", ""));
    ffactory.addProductLaboratories(ProductByDate("Suzuki", ""));
    ffactory.addProductLaboratories(ProductByDate("Kovi", ""));
    ffactory.addProductLaboratories(ProductByDate("KTM", ""));
    ffactory.addProductLaboratory1(ProductByDate("Trucks:  ", ""));
    ffactory.addProductLaboratory1(ProductByDate("Камаз", ""));
    ffactory.addProductLaboratory1(ProductByDate("MAN", ""));
    ffactory.addProductLaboratory1(ProductByDate("MAN", ""));
    ffactory.addProductLaboratory1(ProductByDate("Урал", ""));
    ffactory.addProductLaboratory1(ProductByDate("DAF", ""));
    ffactory.addProductLaboratory1(ProductByDate("\nRoad construction machines:  ", ""));
    ffactory.addProductLaboratory1(ProductByDate("Liebherr", ""));
    ffactory.addProductLaboratory1(ProductByDate("Liebherr", ""));
    ffactory.addProductLaboratory1(ProductByDate("Terex", ""));
    ffactory.addProductLaboratory1(ProductByDate("Terex", ""));
    ffactory.addProductLaboratory2(ProductByDate("\nCars:  ", ""));
    ffactory.addProductLaboratory2(ProductByDate("Ford", ""));
    ffactory.addProductLaboratory2(ProductByDate("Ford", ""));
    ffactory.addProductLaboratory2(ProductByDate("Ford", ""));
    ffactory.addProductLaboratory2(ProductByDate("Audi", ""));
    ffactory.addProductLaboratory2(ProductByDate("Audi", ""));
    ffactory.addProductLaboratory2(ProductByDate("Audi", ""));
    ffactory.addProductLaboratory2(ProductByDate("Audi", ""));
    ffactory.addProductLaboratory2(ProductByDate("\nMotorcycles:  ", ""));
    ffactory.addProductLaboratory2(ProductByDate("Lifan", ""));
    ffactory.addProductLaboratory2(ProductByDate("Lifan", ""));
    ffactory.addProductLaboratory2(ProductByDate("Lifan", ""));
    ffactory.addProductLaboratory2(ProductByDate("Honda", ""));
    ffactory.addProductLaboratory2(ProductByDate("Honda", ""));
    ffactory.addProductLaboratory2(ProductByDate("Yamaha", ""));
    ffactory.addProductLaboratory2(ProductByDate("Yamaha", ""));
    ffactory.addProductLaboratory3(ProductByDate("\nCars:  ", ""));
    ffactory.addProductLaboratory3(ProductByDate("Toyota", ""));
    ffactory.addProductLaboratory3(ProductByDate("Toyota", ""));
    ffactory.addProductLaboratory3(ProductByDate("Dodge", ""));
    ffactory.addProductLaboratory3(ProductByDate("Dodge", ""));
    ffactory.addProductLaboratory3(ProductByDate("Fiat", ""));
    ffactory.addProductLaboratory3(ProductByDate("\nRoad construction machines:  ", ""));
    ffactory.addProductLaboratory3(ProductByDate("Caterpillar", ""));
    ffactory.addProductLaboratory3(ProductByDate("Caterpillar", ""));
    ffactory.addProductLaboratory3(ProductByDate("Caterpillar", ""));
    ffactory.addProductLaboratory4(ProductByDate("\nBuses:  ", ""));
    ffactory.addProductLaboratory4(ProductByDate("Mercedes-Benz", ""));
    ffactory.addProductLaboratory4(ProductByDate("Mercedes-Benz", ""));
    ffactory.addProductLaboratory4(ProductByDate("Isuzu", ""));
    ffactory.addProductLaboratory4(ProductByDate("Isuzu", ""));
    ffactory.addProductLaboratory4(ProductByDate("Iris", ""));
    ffactory.addProductLaboratory4(ProductByDate("Isuzu", ""));
    ffactory.addProductLaboratory4(ProductByDate("Youtong", ""));
    ffactory.addProductLaboratory5(ProductByDate("\nCars:  ", ""));
    ffactory.addProductLaboratory5(ProductByDate("BMW", ""));
    ffactory.addProductLaboratory5(ProductByDate("Dodge", ""));
    ffactory.addProductLaboratory5(ProductByDate("Fiat", ""));
    ffactory.addProductLaboratory5(ProductByDate("\nAgricultural machinery:  ", ""));
    ffactory.addProductLaboratory5(ProductByDate("Challenger", ""));
    ffactory.addProductLaboratory5(ProductByDate("Challenger", ""));
    ffactory.addProductLaboratory5(ProductByDate("Challenger", ""));
    ffactory.addProductLaboratory5(ProductByDate("JCB", ""));
    ffactory.addProductLaboratory5(ProductByDate("JCB", ""));
    ffactory.addProductLaboratory5(ProductByDate("\nMotorcycles:  ", ""));
    ffactory.addProductLaboratory5(ProductByDate("Geon", ""));
    ffactory.addProductLaboratory5(ProductByDate("Ducati", ""));
    ffactory.addProductLaboratory5(ProductByDate("Suzuki", ""));
    ffactory.addProductLaboratory5(ProductByDate("Suzuki", ""));
    ffactory.addProductLaboratory5(ProductByDate("Suzuki", ""));
    ffactory.addProductLaboratory5(ProductByDate("Kovi", ""));
    ffactory.addProductLaboratory5(ProductByDate("KTM", ""));
    ffactory.addProductLaboratory6(ProductByDate("Trucks:  ", ""));
    ffactory.addProductLaboratory6(ProductByDate("Volvo", ""));
    ffactory.addProductLaboratory6(ProductByDate("Volvo", ""));
    ffactory.addProductLaboratory6(ProductByDate("Volvo", ""));
    ffactory.addProductLaboratory6(ProductByDate("DAF", ""));
    ffactory.addProductLaboratory6(ProductByDate("DAF", ""));
    ffactory.addProductLaboratory6(ProductByDate("\nAgricultural machinery:  ", ""));
    ffactory.addProductLaboratory6(ProductByDate("Kubota", ""));
    ffactory.addProductLaboratory6(ProductByDate("Kubota", ""));
    ffactory.addProductLaboratory6(ProductByDate("Kubota", ""));
    cout << endl;
   int choice3;
   int choicee3;
   bool validInput = false;
do {
    cout << "\nSelect an option:\n";
    cout << "1. List all categories and products of the enterprise tested in laboratories during a specific period of time.\n";
    cout << "2. List products of the selected category of the enterprise tested in Laboratory 1 during a specific period of time.\n";
    cout << "3. List products of the selected category of the enterprise tested in Laboratory 2 during a specific period of time.\n";
    cout << "4. List products of the selected category of the enterprise tested in Laboratory 3 during a specific period of time.\n";
    cout << "5. List products of the selected category of the enterprise tested in Laboratory 4 during a specific period of time.\n";
    cout << "6. List products of the selected category of the enterprise tested in Laboratory 5 during a specific period of time.\n";
    cout << "7. List products of the selected category of the enterprise tested in Laboratory 6 during a specific period of time.\n";
    cout << "8. Exit the program.\n";
    cin >> choice3;
    while (!validInput) {
        if (!(cin >> choicee3)) {
            cout << "Invalid input. Please enter a valid option.\n";
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
        } else {
            validInput = true;
        }
    }
    switch (choice3) {
    case 1:
        while (true) {
            int monthIndexForLaboratory;
            cout << "\nEnter the month number from 0 to 6 to display all products of the enterprise tested in laboratories for that month, or enter -1 to exit: ";
            cin >> monthIndexForLaboratory;
            if (monthIndexForLaboratory == -1) {
                break;
                cout << endl;
            }
            else if (monthIndexForLaboratory == 0) {
                cout << "List of all products of the enterprise tested in laboratories for January:\n";
                printAllProductsForJanuary(ffactory.getProducts());
                cout << endl;
            }
            else if (monthIndexForLaboratory == 1) {
                cout << "List of all products of the enterprise tested in laboratories for February:";
                printAllProductsForFebruary(ffactory.getProducts());
                cout << endl;
            }
            else if (monthIndexForLaboratory == 2) {
                cout << "List of all products of the enterprise tested in laboratories for March:";
                printAllProductsForMarch(ffactory.getProducts());
                cout << endl;
            }
            else if (monthIndexForLaboratory == 3) {
                cout << "List of all products of the enterprise tested in laboratories for April:";
                printAllProductsForApril(ffactory.getProducts());
                cout << endl;
            }
            else if (monthIndexForLaboratory == 4) {
                cout << "List of all products of the enterprise tested in laboratories for May:";
                printAllProductsForMay(ffactory.getProducts());
                cout << endl;
            }
            else if (monthIndexForLaboratory == 5) {
                cout << "List of all products of the enterprise tested in laboratories for June:";
                printAllProductsForJune(ffactory.getProducts());
                cout << endl;
            }
            else {
                cout << "The entered index is incorrect!" << endl;
            }
        }
        break;
    case 2:
while(true){
int index;
cout << "\n\nEnter the category number (0 or 1) to get the list of products for the specified category in Laboratory 1, or enter -1 to exit: ";
cin >> index;
int monthIndex;
cout << "\nEnter the month number from 0 to 6 to display all products of the specified category that underwent testing in Laboratory 1 for the given month, or enter -1 to exit: ";
cin >> monthIndex;
if (index == -1){
break;
cout << endl;
}
else if (index == 0){
if (monthIndex == 0){
cout << "\nList of products in the category: Cargo vehicles, that underwent testing in Laboratory 1 in January:\n";
printAllProductsForJanuary(ffactory.getProducts());
}
else{
cout << "\nNo products of the category: Cargo vehicles, underwent testing in Laboratory 1 for the specified month!";
}
}
else if (index == 1){
if (monthIndex == 4){
cout << "List of products in the category: Road construction machinery, that underwent testing in Laboratory 1 in May:";
printAllProductsForMay(ffactory.getProducts());
}
else{
cout << "\nNo products of the category: Road construction machinery, underwent testing in Laboratory 1 for the specified month!";
}
}
else {
cout << "Invalid index entered!";
}
}
break;
case 3:
while(true){
int index;
cout << "\n\nEnter the category number (0 or 1) to get the list of products for the specified category in Laboratory 2, or enter -1 to exit: ";
cin >> index;
int monthIndex;
cout << "\nEnter the month number from 0 to 6 to display all products of the specified category that underwent testing in Laboratory 2 for the given month, or enter -1 to exit: ";
cin >> monthIndex;
if (index == -1){
break;
cout << endl;
}
else if (index == 0){
if (monthIndex == 1){
cout << "List of products in the category: Passenger cars, that underwent testing in Laboratory 2 in February:";
printAllProductsForFebruary(ffactory.getProducts());
}
else{
cout << "\nNo products of the category: Passenger cars, underwent testing in Laboratory 2 for the specified month!";
}
}
else if (index == 1){
if (monthIndex == 5){
cout << "List of products in the category: Motorcycles, that underwent testing in Laboratory 2 in June:";
printAllProductsForJune(ffactory.getProducts());
}
else{
cout << "\nNo products of the category: Motorcycles, underwent testing in Laboratory 2 for the specified month!";
}
}
else {
cout << "Invalid index entered!";
}
}
break;
case 4:
while(true){
int index;
cout << "\n\nEnter the category number (0 or 1) to get a list of products from the specified category in Laboratory 3, or enter -1 to exit: ";
cin >> index;
int monthIndex;
cout << "\nEnter the month number from 0 to 6 to display all products from the specified category that underwent testing in Laboratory 3 for this entered month, or enter -1 to exit: ";
cin >> monthIndex;
if (index == -1){
break;
cout << endl;
}
else if (index == 0){
if (monthIndex == 1){
cout << "List of products in the category: Passenger cars that underwent testing in Laboratory 3:";
printAllProductsForFebruary(ffactory.getProducts());
}
else{
cout << "\nNo products of the category 'Passenger cars' underwent testing in Laboratory 3 for the specified month!";
}
}
else if (index == 1){
if (monthIndex == 4){
cout << "List of products in the category: Construction machinery that underwent testing in Laboratory 3:";
printAllProductsForMay(ffactory.getProducts());
}
else{
cout << "\nNo products of the category 'Construction machinery' underwent testing in Laboratory 3 for the specified month!";
}
}
else {
cout << "The entered index is incorrect!";
}
}
break;
case 5:
while(true){
int index;
cout << "\n\nEnter the category number 0 to get a list of products from the specified category in Laboratory 4, or enter -1 to exit: ";
cin >> index;
int monthIndex;
cout << "\nEnter the month number from 0 to 6 to display all products from the specified category that underwent testing in Laboratory 4 for this entered month, or enter -1 to exit: ";
cin >> monthIndex;
if (index == -1){
break;
cout << endl;
}
else if (index == 0){
if (monthIndex == 2){
cout << "List of products in the category: Buses that underwent testing in Laboratory 4:";
printAllProductsForFebruary(ffactory.getProducts());
}
else{
cout << "\nNo products of the category 'Buses' underwent testing in Laboratory 4 for the specified month!";
}
}
else {
cout << "The entered index is incorrect!";
}
}
break;
case 6:
while(true){
int index;
cout << "\n\nEnter the category number, either 0 or 1 or 2, to get a list of products from the specified category in Laboratory 5, or enter -1 to exit: ";
cin >> index;
int monthIndex;
cout << "\nEnter the month number from 0 to 6 to display all products from the specified category that underwent testing in Laboratory 5 for this entered month, or enter -1 to exit: ";
cin >> monthIndex;
if (index == -1){
break;
cout << endl;
}
else if (index == 0){
if (monthIndex == 1){
cout << "List of products in the category: Passenger cars that underwent testing in Laboratory 5:";
printAllProductsForFebruary(ffactory.getProducts());
}
else{
cout << "\nNo products of the category 'Passenger cars' underwent testing in Laboratory 5 for the specified month!";
}
}
else if (index == 1){
if (monthIndex == 3){
cout << "List of products in the category: Agricultural machinery that underwent testing in Laboratory 5:";
printAllProductsForApril(ffactory.getProducts());
}
else{
cout << "\nNo products of the category 'Agricultural machinery' underwent testing in Laboratory 5 for the specified month!";
}
}
else if (index == 2){
if (monthIndex == 5){
cout << "List of products in the category: Motorcycles that underwent testing in Laboratory 5:";
printAllProductsForJune(ffactory.getProducts());
}
else{
cout << "\nNo products of the category 'Motorcycles' underwent testing in Laboratory 5 for the specified month!";
}
}
else {
cout << "The entered index is incorrect!";
}
}
break;
    case 7:
while(true){
int index;
cout << "\n\nEnter the category number, either 0 or 1, to get a list of products from the specified category in Laboratory 6, or enter -1 to exit: ";
cin >> index;
int monthIndex;
cout << "\nEnter the month number from 0 to 6 to display all products from the specified category that underwent testing in Laboratory 6 for this entered month, or enter -1 to exit: ";
cin >> monthIndex;
if (index == -1){
break;
cout << endl;
}
else if (index == 0){
if (monthIndex == 0){
cout << "List of products in the category: Cargo trucks that underwent testing in Laboratory 6:";
printAllProductsForJanuary(ffactory.getProducts());
}
else{
cout << "\nNo products of the category 'Buses' underwent testing in Laboratory 6 for the specified month!";
}
}
else if (index == 1){
if (monthIndex == 3){
cout << "List of products in the category: Agricultural machinery that underwent testing in Laboratory 6:";
printAllProductsForApril(ffactory.getProducts());
}
else{
cout << "\nNo products of the category 'Agricultural machinery' underwent testing in Laboratory 6 for the specified month!";
}
}
else {
cout << "The entered index is incorrect!";
}
}
break;
case 8:
cout << "The program has finished its execution\n";
break;
default:
cout << "Invalid option entered. Please try again\n";
}
validInput = false;
} while (choice3 != 8);
continue;
}
else if(mainChoice == 11){
    cout << "\n\n";
    cout << endl << endl;
    int choice4;
do {
cout << "\nChoose an option:\n";
cout << "1. List of all testers participating in the testing of a specific product in Laboratory 1 during a certain period of time\n";
cout << "2. List of all testers participating in the testing of a specific product in Laboratory 2 during a certain period of time\n";
cout << "3. List of all testers participating in the testing of a specific product in Laboratory 3 during a certain period of time\n";
cout << "4. List of all testers participating in the testing of a specific product in Laboratory 4 during a certain period of time\n";
cout << "5. List of all testers participating in the testing of a specific product in Laboratory 5 during a certain period of time\n";
cout << "6. List of all testers participating in the testing of a specific product in Laboratory 6 during a certain period of time\n";
cout << "7. A list of all testers participating in the testing of products of a specific category in Laboratory 1 during a certain period of time\n";
cout << "8. A list of all testers participating in the testing of products of a specific category in Laboratory 2 during a certain period of time\n";
cout << "9. A list of all testers participating in the testing of products of a specific category in Laboratory 3 during a certain period of time\n";
cout << "10. A list of all testers participating in the testing of products of a specific category in Laboratory 4 during a certain period of time\n";
cout << "11. A list of all testers participating in the testing of products of a specific category in Laboratory 5 during a certain period of time\n";
cout << "12. A list of all testers participating in the testing of products of a specific category in Laboratory 6 during a certain period of time\n";
cout << "13. A list of all testers involved in product testing in general in the Laboratory 1 during a given time period.\n";
cout << "14. A list of all testers involved in product testing in general in the Laboratory 2 during a given time period.\n";
cout << "15. A list of all testers involved in product testing in general in the Laboratory 3 during a given time period.\n";
cout << "16. A list of all testers involved in product testing in general in the Laboratory 4 during a given time period.\n";
cout << "17. A list of all testers involved in product testing in general in the Laboratory 5 during a given time period.\n";
cout << "18. A list of all testers involved in product testing in general in the Laboratory 6 during a given time period.\n";
cout << "19. Exit the program\n";
cin >> choice4;
    switch (choice4) {
case 1:
while(true){
    int indexOfMonth;
    cout << "\n\nEnter the month number (from 0 to 5) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    cin >> indexOfMonth;
    cout << "\nEnter the product number (from 1 to 8) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    int indexOfProduct;
    cin >> indexOfProduct;
    if (indexOfMonth == -1 && indexOfProduct == -1){
        break;
        cout << endl;
    }
    else if (indexOfMonth == 0){
        if (indexOfProduct == 1){
        product1.printTesters();
        }
        else if (indexOfProduct == 2){
        product2.printTesters();
        }
        else if (indexOfProduct == 3){
        product3.printTesters();
        }
        else if (indexOfProduct == 4){
        product4.printTesters();
        }
        else if (indexOfProduct == 5){
        product5.printTesters();
        }
        else{
            cout << "\nIn January, there were no tests of the specified product in Laboratory 1!";
        }
    }
    else if (indexOfMonth == 1){
            cout << "\nIn February, there were no tests of any products in Laboratory 1!";
    }
    else if (indexOfMonth == 2){
            cout << "\nIn March, there were no tests of any products in Laboratory 1!";
    }
    else if (indexOfMonth == 3){
            cout << "\nIn April, there were no tests of any products in Laboratory 1!";
    }
    else if (indexOfMonth == 4){
        if (indexOfProduct == 1){
        product20.printTesters();
        }
        else if (indexOfProduct == 2){
        product21.printTesters();
        }
        else if (indexOfProduct == 3){
        product22.printTesters();
        }
        else{
            cout << "\nIn May, there were no tests of the specified product in Laboratory 1!";
        }
    }
    else if (indexOfMonth == 5){
            cout << "\nIn June, there were no tests of any products in Laboratory 1!";
    }
    else {
        cout << "The entered index is incorrect!";
    }
}
break;
    case 2:
    while (true) {
        int indexOfMonth;
        cout << "\n\nEnter the month number (from 0 to 5) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
        cin >> indexOfMonth;
        cout << "\nEnter the product number (from 1 to 8) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
        int indexOfProduct;
        cin >> indexOfProduct;
        if (indexOfMonth == -1 && indexOfProduct == -1) {
            break;
            cout << endl;
        } else if (indexOfMonth == 0) {
            cout << "\nIn January, there were no tests of the specified product in Laboratory 2!";
        } else if (indexOfMonth == 1) {
            if (indexOfProduct == 1) {
                product6.printTesters();
            } else if (indexOfProduct == 2) {
                product7.printTesters();
            } else if (indexOfProduct == 3) {
                product8.printTesters();
            } else if (indexOfProduct == 4) {
                product9.printTesters();
            } else if (indexOfProduct == 5) {
                product10.printTesters();
            } else if (indexOfProduct == 6) {
                product11.printTesters();
            } else {
                cout << "\nIn February, there were no tests of the specified product in Laboratory 2!";
            }
        } else if (indexOfMonth == 2) {
            cout << "\nIn March, there were no tests of any products in Laboratory 2!";
        } else if (indexOfMonth == 3) {
            cout << "\nIn April, there were no tests of any products in Laboratory 2!";
        } else if (indexOfMonth == 4) {
            cout << "\nIn May, there were no tests of any products in Laboratory 2!";
        } else if (indexOfMonth == 5) {
            if (indexOfProduct == 1) {
                product23.printTesters();
            } else if (indexOfProduct == 2) {
                product24.printTesters();
            } else if (indexOfProduct == 3) {
                product25.printTesters();
            } else if (indexOfProduct == 4) {
                product26.printTesters();
            } else if (indexOfProduct == 5) {
                product27.printTesters();
            } else if (indexOfProduct == 6) {
                product28.printTesters();
            } else if (indexOfProduct == 7) {
                product29.printTesters();
            } else if (indexOfProduct == 8) {
                product30.printTesters();
            } else {
                cout << "\nIn June, there were no tests of the specified product in Laboratory 2!";
            }
        } else {
            cout << "The entered index is incorrect!";
        }
    }
    break;
case 3:
    while (true) {
        int indexOfMonth;
        cout << "\n\nEnter the month number (from 0 to 5) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
        cin >> indexOfMonth;
        cout << "\nEnter the product number (from 1 to 8) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
        int indexOfProduct;
        cin >> indexOfProduct;
        if (indexOfMonth == -1 && indexOfProduct == -1) {
            break;
            cout << endl;
        } else if (indexOfMonth == 0) {
            cout << "\nIn January, there were no tests of the specified product in Laboratory 3!";
        } else if (indexOfMonth == 1) {
            if (indexOfProduct == 1) {
                product6.printTesters();
            } else if (indexOfProduct == 2) {
                product7.printTesters();
            } else if (indexOfProduct == 3) {
                product8.printTesters();
            } else if (indexOfProduct == 4) {
                product9.printTesters();
            } else if (indexOfProduct == 5) {
                product10.printTesters();
            } else if (indexOfProduct == 6) {
                product11.printTesters();
            } else {
                cout << "\nIn February, there were no tests of the specified product in Laboratory 3!";
            }
        } else if (indexOfMonth == 2) {
            cout << "\nIn March, there were no tests of any products in Laboratory 3!";
        } else if (indexOfMonth == 3) {
            cout << "\nIn April, there were no tests of any products in Laboratory 3!";
        } else if (indexOfMonth == 4) {
            if (indexOfProduct == 1) {
                product20.printTesters();
            } else if (indexOfProduct == 2) {
                product21.printTesters();
            } else if (indexOfProduct == 3) {
                product22.printTesters();
            } else {
                cout << "\nIn May, there were no tests of the specified product in Laboratory 3!";
            }
        } else if (indexOfMonth == 5) {
            cout << "\nIn June, there were no tests of any products in Laboratory 3!";
        } else {
            cout << "The entered index is incorrect!";
        }
    }
    break;
    case 4:
    while (true) {
        int indexOfMonth;
        cout << "\n\nEnter the month number (from 0 to 5) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
        cin >> indexOfMonth;
        cout << "\nEnter the product number (from 1 to 8) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
        int indexOfProduct;
        cin >> indexOfProduct;
        if (indexOfMonth == -1 && indexOfProduct == -1) {
            break;
            cout << endl;
        } else if (indexOfMonth == 0) {
            cout << "\nIn January, there were no tests of the products in Laboratory 4!";
        } else if (indexOfMonth == 1) {
            cout << "\nIn February, there were no tests of the products in Laboratory 4!";
        } else if (indexOfMonth == 2) {
            if (indexOfProduct == 1) {
                product12.printTesters();
            } else if (indexOfProduct == 2) {
                product13.printTesters();
            } else if (indexOfProduct == 3) {
                product14.printTesters();
            } else if (indexOfProduct == 4) {
                product15.printTesters();
            } else {
                cout << "\nIn March, there were no tests of the specified product in Laboratory 4!";
            }
        } else if (indexOfMonth == 3) {
            cout << "\nIn April, there were no tests of the products in Laboratory 4!";
        } else if (indexOfMonth == 4) {
            cout << "\nIn May, there were no tests of the products in Laboratory 4!";
        } else if (indexOfMonth == 5) {
            cout << "\nIn June, there were no tests of the products in Laboratory 4!";
        } else {
            cout << "The entered index is incorrect!";
        }
    }
    break;

case 5:
    while (true) {
        int indexOfMonth;
        cout << "\n\nEnter the month number (from 0 to 5) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
        cin >> indexOfMonth;
        cout << "\nEnter the product number (from 1 to 8) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
        int indexOfProduct;
        cin >> indexOfProduct;
        if (indexOfMonth == -1 && indexOfProduct == -1) {
            break;
            cout << endl;
        } else if (indexOfMonth == 0) {
            cout << "\nIn January, there were no tests of the products in Laboratory 5!";
        } else if (indexOfMonth == 1) {
            if (indexOfProduct == 1) {
                product6.printTesters();
            } else if (indexOfProduct == 2) {
                product7.printTesters();
            } else if (indexOfProduct == 3) {
                product8.printTesters();
            } else if (indexOfProduct == 4) {
                product9.printTesters();
            } else if (indexOfProduct == 5) {
                product10.printTesters();
            } else if (indexOfProduct == 6) {
                product11.printTesters();
            } else {
                cout << "\nIn February, there were no tests of the specified product in Laboratory 5!";
            }
        } else if (indexOfMonth == 2) {
            cout << "\nIn March, there were no tests of the products in Laboratory 5!";
        } else if (indexOfMonth == 3) {
            if (indexOfProduct == 1) {
                product16.printTesters();
            } else if (indexOfProduct == 2) {
                product17.printTesters();
            } else if (indexOfProduct == 3) {
                product18.printTesters();
            } else if (indexOfProduct == 4) {
                product19.printTesters();
            } else {
                cout << "\nIn April, there were no tests of the specified product in Laboratory 5!";
            }
        } else if (indexOfMonth == 4) {
            cout << "\nIn May, there were no tests of the products in Laboratory 5!";
        } else if (indexOfMonth == 5) {
            if (indexOfProduct == 1) {
                product23.printTesters();
            } else if (indexOfProduct == 2) {
                product24.printTesters();
            } else if (indexOfProduct == 3) {
                product25.printTesters();
            } else if (indexOfProduct == 4) {
                product26.printTesters();
            } else if (indexOfProduct == 5) {
                product27.printTesters();
            } else if (indexOfProduct == 6) {
                product28.printTesters();
            } else if (indexOfProduct == 7) {
                product29.printTesters();
            } else if (indexOfProduct == 8) {
                product30.printTesters();
            } else {
                cout << "\nIn June, there were no tests of the specified product in Laboratory 5!";
            }
        } else {
            cout << "The entered index is incorrect!";
        }
    }
    break;
    case 6:
    while (true) {
        int indexOfMonth;
        cout << "\n\nEnter the month number (from 0 to 5) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
        cin >> indexOfMonth;
        cout << "\nEnter the product number (from 1 to 8) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
        int indexOfProduct;
        cin >> indexOfProduct;
        if (indexOfMonth == -1 && indexOfProduct == -1) {
            break;
            cout << endl;
        } else if (indexOfMonth == 0) {
            if (indexOfProduct == 1) {
                product1.printTesters();
            } else if (indexOfProduct == 2) {
                product2.printTesters();
            } else if (indexOfProduct == 3) {
                product3.printTesters();
            } else if (indexOfProduct == 4) {
                product4.printTesters();
            } else if (indexOfProduct == 5) {
                product5.printTesters();
            } else {
                cout << "\nIn January, there were no tests of the specified product in Laboratory 6!";
            }
        } else if (indexOfMonth == 1) {
            cout << "\nIn February, there were no tests of the products in Laboratory 6!";
        } else if (indexOfMonth == 2) {
            if (indexOfProduct == 1) {
                product12.printTesters();
            } else if (indexOfProduct == 2) {
                product13.printTesters();
            } else if (indexOfProduct == 3) {
                product14.printTesters();
            } else if (indexOfProduct == 4) {
                product15.printTesters();
            } else {
                cout << "\nIn March, there were no tests of the specified product in Laboratory 6!";
            }
        } else if (indexOfMonth == 3) {
            if (indexOfProduct == 1) {
                product16.printTesters();
            } else if (indexOfProduct == 2) {
                product17.printTesters();
            } else if (indexOfProduct == 3) {
                product18.printTesters();
            } else if (indexOfProduct == 4) {
                product19.printTesters();
            } else {
                cout << "\nIn April, there were no tests of the specified product in Laboratory 6!";
            }
        } else if (indexOfMonth == 4) {
            cout << "\nIn May, there were no tests of the products in Laboratory 6!";
        } else if (indexOfMonth == 5) {
            cout << "\nIn June, there were no tests of the products in Laboratory 6!";
        } else {
            cout << "The entered index is incorrect!";
        }
    }
    break;
    case 7:
       while (true) {
    int index;
    cout << "\n\nEnter the month number (from 1 to 6) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    cin >> index;
    cout << "\nEnter a category number (from 1 to 6) to get the category, products in the category, and a list of testers participating in testing the specified category during a specified time period, or enter -1 to exit:";
    int indexOfCategory;
    cin >> indexOfCategory;
    if (index == -1 && indexOfCategory == -1) {
        break;
        cout << endl;
    } else if (index == 1) {
        if (indexOfCategory == 1){
        category1.printTesters();
        }
        else {
            cout << "\nNo tests of the specified category were conducted in January";
        }
    } else if (index == 2) {
        if (indexOfCategory == 2){
            cout << "\nNo tests of the specified category were conducted in February";
        }
    } else if (index == 3) {
        cout << "\nNo tests of the specified category were conducted in March";
    } else if (index == 4) {
        cout << "\nNo tests of the specified category were conducted in April";
    } else if (index == 5) {
        if (indexOfCategory == 5){
        category5.printTesters();
        }
        else {
            cout << "\nNo tests of the specified category were conducted in May";
        }
   } else if (index == 6) {
         cout << "\nNo tests of the specified category were conducted in June";
    }
    else {
        cout << "The entered index is incorrect!";
   }
}
    break;
    case 8:
       while (true) {
    int index;
    cout << "\n\nEnter the month number (from 1 to 6) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    cin >> index;
    cout << "\nEnter a category number (from 1 to 6) to get the category, products in the category, and a list of testers participating in testing the specified category during a specified time period, or enter -1 to exit:";
    int indexOfCategory;
    cin >> indexOfCategory;
    if (index == -1 && indexOfCategory == -1) {
        break;
        cout << endl;
    } else if (index == 1) {
            cout << "\nNo tests of the specified category were conducted in January";
    } else if (index == 2) {
            if (indexOfCategory == 2){
                category2.printTesters();
            }
            else {
            cout << "\nNo tests of the specified category were conducted in February";
            }
    } else if (index == 3) {
        cout << "\nNo tests of the specified category were conducted in March";
    } else if (index == 4) {
        cout << "\nNo tests of the specified category were conducted in April";
    } else if (index == 5) {
            cout << "\nNo tests of the specified category were conducted in May";
   } else if (index == 6) {
         if (indexOfCategory == 6){
                category6.printTesters();
            }
            else {
            cout << "\nNo tests of the specified category were conducted in June";
            }
    }
    else {
        cout << "The entered index is incorrect!";
   }
}
    break;
    case 9:
       while (true) {
    int index;
    cout << "\n\nEnter the month number (from 1 to 6) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    cin >> index;
    cout << "\nEnter a category number (from 1 to 6) to get the category, products in the category, and a list of testers participating in testing the specified category during a specified time period, or enter -1 to exit:";
    int indexOfCategory;
    cin >> indexOfCategory;
    if (index == -1 && indexOfCategory == -1) {
        break;
        cout << endl;
    } else if (index == 1) {
            cout << "\nNo tests of the specified category were conducted in January";
    } else if (index == 2) {
            if (indexOfCategory == 2){
                category2.printTesters();
            }
            else {
            cout << "\nNo tests of the specified category were conducted in February";
            }
    } else if (index == 3) {
        cout << "\nNo tests of the specified category were conducted in March";
    } else if (index == 4) {
        cout << "\nNo tests of the specified category were conducted in April";
    } else if (index == 5) {
            if (indexOfCategory == 5){
                category5.printTesters();
            }
            else {
            cout << "\nNo tests of the specified category were conducted in May";
            }
   } else if (index == 6) {
            cout << "\nNo tests of the specified category were conducted in June";
    }
    else {
        cout << "The entered index is incorrect!";
   }
}
    break;
    case 10:
       while (true) {
    int index;
    cout << "\n\nEnter the month number (from 1 to 6) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    cin >> index;
    cout << "\nEnter a category number (from 1 to 6) to get the category, products in the category, and a list of testers participating in testing the specified category during a specified time period, or enter -1 to exit:";
    int indexOfCategory;
    cin >> indexOfCategory;
    if (index == -1 && indexOfCategory == -1) {
        break;
        cout << endl;
    } else if (index == 1) {
            cout << "\nNo tests of the specified category were conducted in January";
    } else if (index == 2) {
            cout << "\nNo tests of the specified category were conducted in February";
    } else if (index == 3) {
        if (indexOfCategory == 3){
                category3.printTesters();
            }
            else {
            cout << "\nNo tests of the specified category were conducted in March";
            }
    } else if (index == 4) {
        cout << "\nNo tests of the specified category were conducted in April";
    } else if (index == 5) {
            cout << "\nNo tests of the specified category were conducted in May";
   } else if (index == 6) {
            cout << "\nNo tests of the specified category were conducted in June";
    }
    else {
        cout << "The entered index is incorrect!";
   }
}
    break;
    case 11:
       while (true) {
    int index;
    cout << "\n\nEnter the month number (from 1 to 6) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    cin >> index;
    cout << "\nEnter a category number (from 1 to 6) to get the category, products in the category, and a list of testers participating in testing the specified category during a specified time period, or enter -1 to exit:";
    int indexOfCategory;
    cin >> indexOfCategory;
    if (index == -1 && indexOfCategory == -1) {
        break;
        cout << endl;
    } else if (index == 1) {
            cout << "\nNo tests of the specified category were conducted in January";
    } else if (index == 2) {
             if (indexOfCategory == 2){
                category2.printTesters();
            }
            else {
            cout << "\nNo tests of the specified category were conducted in February";
            }
    } else if (index == 3) {
            cout << "\nNo tests of the specified category were conducted in March";
    } else if (index == 4) {
        if (indexOfCategory == 4){
                category4.printTesters();
            }
            else {
            cout << "\nNo tests of the specified category were conducted in April";
            }
    } else if (index == 5) {
            cout << "\nNo tests of the specified category were conducted in May";
   } else if (index == 6) {
            if (indexOfCategory == 6){
                category6.printTesters();
            }
            else {
            cout << "\nNo tests of the specified category were conducted in June";
            }
    }
    else {
        cout << "The entered index is incorrect!";
   }
}
    break;
    case 12:
       while (true) {
    int index;
    cout << "\n\nEnter the month number (from 1 to 6) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    cin >> index;
    cout << "\nEnter a category number (from 1 to 6) to get the category, products in the category, and a list of testers participating in testing the specified category during a specified time period, or enter -1 to exit:";
    int indexOfCategory;
    cin >> indexOfCategory;
    if (index == -1 && indexOfCategory == -1) {
        break;
        cout << endl;
    } else if (index == 1) {
            if (indexOfCategory == 1){
                category1.printTesters();
            }
            else {
            cout << "\nNo tests of the specified category were conducted in January";
            }
    } else if (index == 2) {
            cout << "\nNo tests of the specified category were conducted in February";
    } else if (index == 3) {
            cout << "\nNo tests of the specified category were conducted in March";
    } else if (index == 4) {
             if (indexOfCategory == 4){
                category4.printTesters();
            }
            else {
            cout << "\nNo tests of the specified category were conducted in April";
            }
    } else if (index == 5) {
            cout << "\nNo tests of the specified category were conducted in May";
   } else if (index == 6) {
            cout << "\nNo tests of the specified category were conducted in June";
    }
    else {
        cout << "The entered index is incorrect!";
   }
}
    break;
    case 13:
       while (true) {
    int index;
    cout << "\n\nEnter the month number (from 1 to 6) to get the list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    cin >> index;
    if (index == -1) {
        break;
        cout << endl;
    } else if (index == 1) {
                category1.printTesters();
    } else if (index == 2) {
            cout << "\nNo tests were conducted in February";
    } else if (index == 3) {
            cout << "\nNo tests were conducted in March";
    } else if (index == 4) {
                category4.printTesters();
    } else if (index == 5) {
            cout << "\nNo tests were conducted in May";
   } else if (index == 6) {
            cout << "\nNo tests were conducted in June";
    }
    else {
        cout << "The entered index is incorrect!";
   }
}
    break;
    case 14:
       while (true) {
    int index;
    cout << "\n\nEnter the month number (from 1 to 6) to get the list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    cin >> index;
    if (index == -1) {
        break;
        cout << endl;
    } else if (index == 1) {
                cout << "\nNo tests were conducted in January";
    } else if (index == 2) {
        category2.printTesters();
    } else if (index == 3) {
            cout << "\nNo tests were conducted in March";
    } else if (index == 4) {
                cout << "\nNo tests were conducted in April";
    } else if (index == 5) {
            cout << "\nNo tests were conducted in May";
   } else if (index == 6) {
            category6.printTesters();
    }
    else {
        cout << "The entered index is incorrect!";
   }
}
    break;
    case 15:
       while (true) {
    int index;
    cout << "\n\nEnter the month number (from 1 to 6) to get the list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    cin >> index;
    if (index == -1) {
        break;
        cout << endl;
    } else if (index == 1) {
                cout << "\nNo tests were conducted in January";
    } else if (index == 2) {
        category2.printTesters();
    } else if (index == 3) {
            cout << "\nNo tests were conducted in March";
    } else if (index == 4) {
                cout << "\nNo tests were conducted in April";
    } else if (index == 5) {
        category5.printTesters();
   } else if (index == 6) {
        cout << "\nNo tests were conducted in June";
    }
    else {
        cout << "The entered index is incorrect!";
   }
}
    break;
    case 16:
       while (true) {
    int index;
    cout << "\n\nEnter the month number (from 1 to 6) to get the list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    cin >> index;
    if (index == -1) {
        break;
        cout << endl;
    } else if (index == 1) {
                cout << "\nNo tests were conducted in January";
    } else if (index == 2) {
        cout << "\nNo tests were conducted in February";
    } else if (index == 3) {
            category3.printTesters();
    } else if (index == 4) {
                cout << "\nNo tests were conducted in April";
    } else if (index == 5) {
        cout << "\nNo tests were conducted in May";
   } else if (index == 6) {
        cout << "\nNo tests were conducted in June";
    }
    else {
        cout << "The entered index is incorrect!";
   }
}
    break;
    case 17:
       while (true) {
    int index;
    cout << "\n\nEnter the month number (from 1 to 6) to get the list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    cin >> index;
    if (index == -1) {
        break;
        cout << endl;
    } else if (index == 1) {
                cout << "\nNo tests were conducted in January";
    } else if (index == 2) {
        category2.printTesters();
    } else if (index == 3) {
            cout << "\nNo tests were conducted in March";
    } else if (index == 4) {
                category4.printTesters();
    } else if (index == 5) {
        cout << "\nNo tests were conducted in May";
   } else if (index == 6) {
            category6.printTesters();
    }
    else {
        cout << "The entered index is incorrect!";
   }
}
    break;
    case 18:
       while (true) {
    int index;
    cout << "\n\nEnter the month number (from 1 to 6) to get the list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    cin >> index;
    if (index == -1) {
        break;
        cout << endl;
    } else if (index == 1) {
                category2.printTesters();
    } else if (index == 2) {
        cout << "\nNo tests were conducted in February";
    } else if (index == 3) {
            cout << "\nNo tests were conducted in March";
    } else if (index == 4) {
                category4.printTesters();
    } else if (index == 5) {
        cout << "\nNo tests were conducted in May";
   } else if (index == 6) {
            cout << "\nNo tests were conducted in June";
    }
    else {
        cout << "The entered index is incorrect!";
   }
}
    break;
    }
    }while (choice4 != 19);
    delete tester1; delete tester2; delete tester3; delete tester4; delete tester5; delete tester6; delete tester7; delete tester8; delete tester9;
    delete tester10; delete tester11; delete tester12; delete tester13; delete tester14; delete tester15; delete tester16; delete tester17;
    delete tester18; delete tester19; delete tester20; delete tester21; delete tester22; delete tester23; delete tester24; delete tester25;
    delete tester26; delete tester27; delete tester28; delete tester29;
continue;
}
else if (mainChoice == 12){
 Equipment* equipment1 = new Equipment("Scales for mass measurement and load distribution");
 Equipment* equipment2 = new Equipment("Dynamometers");
 Equipment* equipment3 = new Equipment("Electronic control and diagnostic systems");
 Equipment* equipment4 = new Equipment("Test stands for pneumatic and hydraulic systems");
 Equipment* equipment5 = new Equipment("Test stands for bodies and frames");
 Equipment* equipment6 = new Equipment("Fuel consumption measuring systems");
 Equipment* equipment7 = new Equipment("Testers of the efficiency of cargo systems");
 Equipment* equipment8 = new Equipment("Rear view cameras and monitoring systems");
 Equipment* equipment9 = new Equipment("Load capacity testers");
 Equipment* equipment10 = new Equipment("Monitoring and data recording systems");
 Equipment* equipment11 = new Equipment("Diagnostic scanners");
 Equipment* equipment12 = new Equipment("Engine efficiency testers");
 Equipment* equipment13 = new Equipment("Brake testers");
 Equipment* equipment14 = new Equipment("Emission level scanners");
 Equipment* equipment15 = new Equipment("Speed ​​and acceleration meters");
 Equipment* equipment16 = new Equipment("Test stands");
 Equipment* equipment17 = new Equipment("Measuring systems for noise and vibrations");
 Equipment* equipment18 = new Equipment("Video surveillance cameras");
 Equipment* equipment19 = new Equipment("Test stands for the chassis");
 Equipment* equipment20 = new Equipment("Weight gauges for load measurement");
 Equipment* equipment21 = new Equipment("Test systems of electronics and electricity");
 Equipment* equipment22 = new Equipment("Tire monitoring systems");
 Equipment* equipment23 = new Equipment("Testing systems of air conditioning");
 Equipment* equipment24 = new Equipment("Surveillance cameras in the cabin");
 Equipment* equipment25 = new Equipment("Test stands for hydraulic systems");
 Equipment* equipment26 = new Equipment("Test stands for sprayers");
 Equipment* equipment27 = new Equipment("Climatic cameras");
 Equipment* equipment28 = new Equipment("Test stands for agricultural trailers");
 Equipment* equipment29 = new Equipment("Units for measuring soil moisture");
 Equipment* equipment30 = new Equipment("Test stands for load capacity");
 Equipment* equipment31 = new Equipment("GPS monitoring systems");
 Equipment* equipment32 = new Equipment("Test stands for tracked systems");
 Equipment* equipment33 = new Equipment("Laboratory soil analyzers");
 Equipment* equipment34 = new Equipment("Test stands for cooling systems");
 Equipment* equipment35 = new Equipment("Test benches for ergonomics and comfort");
 Equipment* equipment36 = new Equipment("Test stands for aerodynamics");
 Equipment* equipment37 = new Equipment("Test stands for electronic security systems");
 Equipment* equipment38 = new Equipment("Test stands for electronic stabilization systems");
 product1.addEquipment(equipment1); product1.addEquipment(equipment2); product1.addEquipment(equipment3); product1.addEquipment(equipment4); product1.addEquipment(equipment6);
 product2.addEquipment(equipment6); product2.addEquipment(equipment2); product2.addEquipment(equipment3); product2.addEquipment(equipment12); product2.addEquipment(equipment8);
 product3.addEquipment(equipment11);product3.addEquipment(equipment13); product3.addEquipment(equipment14); product3.addEquipment(equipment12); product3.addEquipment(equipment3);
 product4.addEquipment(equipment5); product4.addEquipment(equipment4); product4.addEquipment(equipment9); product4.addEquipment(equipment1); product4.addEquipment(equipment3);
 product5.addEquipment(equipment4); product5.addEquipment(equipment6); product5.addEquipment(equipment2); product5.addEquipment(equipment1); product5.addEquipment(equipment3);
 product6.addEquipment(equipment6); product6.addEquipment(equipment2); product6.addEquipment(equipment10); product6.addEquipment(equipment11);
 product7.addEquipment(equipment12); product7.addEquipment(equipment13); product7.addEquipment(equipment12); product7.addEquipment(equipment16);
 product8.addEquipment(equipment13); product8.addEquipment(equipment18); product8.addEquipment(equipment14); product8.addEquipment(equipment4); product8.addEquipment(equipment3); product8.addEquipment(equipment2); product8.addEquipment(equipment1);
 product9.addEquipment(equipment11); product9.addEquipment(equipment12); product9.addEquipment(equipment13); product9.addEquipment(equipment2); product9.addEquipment(equipment19); product9.addEquipment(equipment20);
 product10.addEquipment(equipment4); product10.addEquipment(equipment15); product10.addEquipment(equipment13); product10.addEquipment(equipment17); product10.addEquipment(equipment16);
 product11.addEquipment(equipment12); product11.addEquipment(equipment15); product11.addEquipment(equipment22); product11.addEquipment(equipment21); product11.addEquipment(equipment17);
 product12.addEquipment(equipment12); product12.addEquipment(equipment2); product12.addEquipment(equipment13); product12.addEquipment(equipment5); product12.addEquipment(equipment6);
 product13.addEquipment(equipment21); product13.addEquipment(equipment17); product13.addEquipment(equipment16); product13.addEquipment(equipment14); product13.addEquipment(equipment2); product13.addEquipment(equipment5); product13.addEquipment(equipment3);
 product14.addEquipment(equipment16); product14.addEquipment(equipment17); product14.addEquipment(equipment5); product14.addEquipment(equipment21);
 product15.addEquipment(equipment14); product15.addEquipment(equipment2); product15.addEquipment(equipment5); product15.addEquipment(equipment3); product15.addEquipment(equipment18);
 product16.addEquipment(equipment6); product16.addEquipment(equipment5); product16.addEquipment(equipment12); product16.addEquipment(equipment13);
 product17.addEquipment(equipment20); product17.addEquipment(equipment22); product17.addEquipment(equipment31); product17.addEquipment(equipment27);
 product18.addEquipment(equipment28); product18.addEquipment(equipment30); product18.addEquipment(equipment32); product18.addEquipment(equipment33); product18.addEquipment(equipment26);
 product19.addEquipment(equipment28); product19.addEquipment(equipment32); product19.addEquipment(equipment2); product19.addEquipment(equipment14); product19.addEquipment(equipment4);
 product20.addEquipment(equipment32); product20.addEquipment(equipment11); product20.addEquipment(equipment24); product20.addEquipment(equipment38);
 product21.addEquipment(equipment32); product21.addEquipment(equipment22); product21.addEquipment(equipment26); product21.addEquipment(equipment21); product21.addEquipment(equipment2); product21.addEquipment(equipment13);
 product22.addEquipment(equipment12); product22.addEquipment(equipment23); product22.addEquipment(equipment2); product22.addEquipment(equipment15); product22.addEquipment(equipment14); product22.addEquipment(equipment18); product22.addEquipment(equipment11);
 product23.addEquipment(equipment38); product23.addEquipment(equipment35); product23.addEquipment(equipment37); product23.addEquipment(equipment12); product23.addEquipment(equipment14);
 product24.addEquipment(equipment36); product24.addEquipment(equipment22); product24.addEquipment(equipment23); product24.addEquipment(equipment18); product24.addEquipment(equipment13);
 product25.addEquipment(equipment11); product25.addEquipment(equipment17); product25.addEquipment(equipment37); product25.addEquipment(equipment35); product25.addEquipment(equipment38);
 product26.addEquipment(equipment14); product26.addEquipment(equipment15); product26.addEquipment(equipment37); product26.addEquipment(equipment32);
 product27.addEquipment(equipment23); product27.addEquipment(equipment14); product27.addEquipment(equipment12); product27.addEquipment(equipment37);
 product28.addEquipment(equipment11); product28.addEquipment(equipment3); product28.addEquipment(equipment12); product28.addEquipment(equipment35); product28.addEquipment(equipment32); product28.addEquipment(equipment16); product28.addEquipment(equipment18);
 product29.addEquipment(equipment13); product29.addEquipment(equipment17); product29.addEquipment(equipment22); product29.addEquipment(equipment21); product29.addEquipment(equipment37); product29.addEquipment(equipment32);
 product30.addEquipment(equipment11); product30.addEquipment(equipment23); product30.addEquipment(equipment22); product30.addEquipment(equipment35); product30.addEquipment(equipment37);
    Category categoryy1("trucks");
    Category categoryy2("cars");
    Category categoryy3("buses");
    Category categoryy4("agricultural machines");
    Category categoryy5("road construction vehicles");
    Category categoryy6("motorcycles");
    categoryy1.addProduct(product1); categoryy1.addProduct(product2); categoryy1.addProduct(product3); categoryy1.addProduct(product4); categoryy1.addProduct(product5);
    categoryy2.addProduct(product6); categoryy2.addProduct(product7); categoryy2.addProduct(product8); categoryy2.addProduct(product9); categoryy2.addProduct(product10); categoryy2.addProduct(product11);
    categoryy3.addProduct(product12); categoryy3.addProduct(product13); categoryy3.addProduct(product14); categoryy3.addProduct(product15);
    categoryy4.addProduct(product16); categoryy4.addProduct(product17); categoryy4.addProduct(product18); categoryy4.addProduct(product19);
    categoryy5.addProduct(product20); categoryy5.addProduct(product21); categoryy5.addProduct(product22);
    categoryy6.addProduct(product23); categoryy6.addProduct(product24); categoryy6.addProduct(product25); categoryy6.addProduct(product26); categoryy6.addProduct(product27);
    categoryy6.addProduct(product28); categoryy6.addProduct(product29); categoryy6.addProduct(product30);
    cout << endl << endl;
     int choice5;
do {
cout << "\nChoose an option:\n";
cout << "1. Get the composition of the equipment used in the test of the specified product in Laboratory 1 during a certain period of time\n";
cout << "2. Get the composition of the equipment used in the test of the specified product in Laboratory 2 during a certain period of time\n";
cout << "3. Get the composition of the equipment used in the test of the specified product in Laboratory 3 during a certain period of time\n";
cout << "4. Get the composition of the equipment used in the test of the specified product in Laboratory 4 during a certain period of time\n";
cout << "5. Get the composition of the equipment used in the test of the specified product in Laboratory 5 during a certain period of time\n";
cout << "6. Get the composition of the equipment used in the test of the specified product in Laboratory 6 during a certain period of time\n";
cout << "7. Get the composition of the equipment used in the test products of a separate category in Laboratory 1 during a certain period of time\n";
cout << "8. Get the composition of the equipment used in the test products of a separate category in Laboratory 2 during a certain period of time\n";
cout << "9. Get the composition of the equipment used in the test products of a separate category in Laboratory 3 during a certain period of time\n";
cout << "10. Get the composition of the equipment used in the test products of a separate category in Laboratory 4 during a certain period of time\n";
cout << "11. Get the composition of the equipment used in the test products of a separate category in Laboratory 5 during a certain period of time\n";
cout << "12. Get the composition of the equipment used in the test products of a separate category in Laboratory 6 during a certain period of time\n";
cout << "13. Get the composition of the equipment used in the test products in general in laboratory 1 during a given time period\n";
cout << "14. Get the composition of the equipment used in the test products in general in laboratory 2 during a given time period\n";
cout << "15. Get the composition of the equipment used in the test products in general in laboratory 3 during a given time period\n";
cout << "16. Get the composition of the equipment used in the test products in general in laboratory 4 during a given time period\n";
cout << "17. Get the composition of the equipment used in the test products in general in laboratory 5 during a given time period\n";
cout << "18. Get the composition of the equipment used in the test products in general in laboratory 6 during a given time period\n";
cout << "19. Exit the program\n";
cin >> choice5;
    switch (choice5) {
case 1:
while(true){
    int indexOfMonth;
    cout << "\n\nEnter a month number (from 0 to 5) to get the inventory of equipment that participated in testing the specified product during a certain time period, or enter -1 to exit: ";
    cin >> indexOfMonth;
    cout << "\nEnter the product number (from 1 to 8) to get the composition of equipment that participated in the testing of the specified product during a certain time, or enter -1 to exit: ";
    int indexOfProduct;
    cin >> indexOfProduct;
    if (indexOfMonth == -1 && indexOfProduct == -1){
        break;
        cout << endl;
    }
    else if (indexOfMonth == 0){
        if (indexOfProduct == 1){
        product1.printEquipment();
        }
        else if (indexOfProduct == 2){
        product2.printEquipment();
        }
        else if (indexOfProduct == 3){
        product3.printEquipment();
        }
        else if (indexOfProduct == 4){
        product4.printEquipment();
        }
        else if (indexOfProduct == 5){
        product5.printEquipment();
        }
        else{
            cout << "\nIn January, there were no tests of the specified product in Laboratory 1!";
        }
    }
    else if (indexOfMonth == 1){
            cout << "\nIn February, there were no tests of any products in Laboratory 1!";
    }
    else if (indexOfMonth == 2){
            cout << "\nIn March, there were no tests of any products in Laboratory 1!";
    }
    else if (indexOfMonth == 3){
            cout << "\nIn April, there were no tests of any products in Laboratory 1!";
    }
    else if (indexOfMonth == 4){
        if (indexOfProduct == 1){
        product20.printEquipment();
        }
        else if (indexOfProduct == 2){
        product21.printEquipment();
        }
        else if (indexOfProduct == 3){
        product22.printEquipment();
        }
        else{
            cout << "\nIn May, there were no tests of the specified product in Laboratory 1!";
        }
    }
    else if (indexOfMonth == 5){
            cout << "\nIn June, there were no tests of any products in Laboratory 1!";
    }
    else {
        cout << "The entered index is incorrect!";
    }
}
break;
    case 2:
    while (true) {
        int indexOfMonth;
        cout << "\n\nEnter the month number (from 0 to 5) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
        cin >> indexOfMonth;
        cout << "\nEnter the product number (from 1 to 8) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
        int indexOfProduct;
        cin >> indexOfProduct;
        if (indexOfMonth == -1 && indexOfProduct == -1) {
            break;
            cout << endl;
        } else if (indexOfMonth == 0) {
            cout << "\nIn January, there were no tests of the specified product in Laboratory 2!";
        } else if (indexOfMonth == 1) {
            if (indexOfProduct == 1) {
                product6.printEquipment();
            } else if (indexOfProduct == 2) {
                product7.printEquipment();
            } else if (indexOfProduct == 3) {
                product8.printEquipment();
            } else if (indexOfProduct == 4) {
                product9.printEquipment();
            } else if (indexOfProduct == 5) {
                product10.printEquipment();
            } else if (indexOfProduct == 6) {
                product11.printEquipment();
            } else {
                cout << "\nIn February, there were no tests of the specified product in Laboratory 2!";
            }
        } else if (indexOfMonth == 2) {
            cout << "\nIn March, there were no tests of any products in Laboratory 2!";
        } else if (indexOfMonth == 3) {
            cout << "\nIn April, there were no tests of any products in Laboratory 2!";
        } else if (indexOfMonth == 4) {
            cout << "\nIn May, there were no tests of any products in Laboratory 2!";
        } else if (indexOfMonth == 5) {
            if (indexOfProduct == 1) {
                product23.printEquipment();
            } else if (indexOfProduct == 2) {
                product24.printEquipment();
            } else if (indexOfProduct == 3) {
                product25.printEquipment();
            } else if (indexOfProduct == 4) {
                product26.printEquipment();
            } else if (indexOfProduct == 5) {
                product27.printEquipment();
            } else if (indexOfProduct == 6) {
                product28.printEquipment();
            } else if (indexOfProduct == 7) {
                product29.printEquipment();
            } else if (indexOfProduct == 8) {
                product30.printEquipment();
            } else {
                cout << "\nIn June, there were no tests of the specified product in Laboratory 2!";
            }
        } else {
            cout << "The entered index is incorrect!";
        }
    }
    break;
case 3:
    while (true) {
        int indexOfMonth;
        cout << "\n\nEnter the month number (from 0 to 5) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
        cin >> indexOfMonth;
        cout << "\nEnter the product number (from 1 to 8) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
        int indexOfProduct;
        cin >> indexOfProduct;
        if (indexOfMonth == -1 && indexOfProduct == -1) {
            break;
            cout << endl;
        } else if (indexOfMonth == 0) {
            cout << "\nIn January, there were no tests of the specified product in Laboratory 3!";
        } else if (indexOfMonth == 1) {
            if (indexOfProduct == 1) {
                product6.printEquipment();
            } else if (indexOfProduct == 2) {
                product7.printEquipment();
            } else if (indexOfProduct == 3) {
                product8.printEquipment();
            } else if (indexOfProduct == 4) {
                product9.printEquipment();
            } else if (indexOfProduct == 5) {
                product10.printEquipment();
            } else if (indexOfProduct == 6) {
                product11.printEquipment();
            } else {
                cout << "\nIn February, there were no tests of the specified product in Laboratory 3!";
            }
        } else if (indexOfMonth == 2) {
            cout << "\nIn March, there were no tests of any products in Laboratory 3!";
        } else if (indexOfMonth == 3) {
            cout << "\nIn April, there were no tests of any products in Laboratory 3!";
        } else if (indexOfMonth == 4) {
            if (indexOfProduct == 1) {
                product20.printEquipment();
            } else if (indexOfProduct == 2) {
                product21.printEquipment();
            } else if (indexOfProduct == 3) {
                product22.printEquipment();
            } else {
                cout << "\nIn May, there were no tests of the specified product in Laboratory 3!";
            }
        } else if (indexOfMonth == 5) {
            cout << "\nIn June, there were no tests of any products in Laboratory 3!";
        } else {
            cout << "The entered index is incorrect!";
        }
    }
    break;
    case 4:
    while (true) {
        int indexOfMonth;
        cout << "\n\nEnter the month number (from 0 to 5) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
        cin >> indexOfMonth;
        cout << "\nEnter the product number (from 1 to 8) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
        int indexOfProduct;
        cin >> indexOfProduct;
        if (indexOfMonth == -1 && indexOfProduct == -1) {
            break;
            cout << endl;
        } else if (indexOfMonth == 0) {
            cout << "\nIn January, there were no tests of the products in Laboratory 4!";
        } else if (indexOfMonth == 1) {
            cout << "\nIn February, there were no tests of the products in Laboratory 4!";
        } else if (indexOfMonth == 2) {
            if (indexOfProduct == 1) {
                product12.printEquipment();
            } else if (indexOfProduct == 2) {
                product13.printEquipment();
            } else if (indexOfProduct == 3) {
                product14.printEquipment();
            } else if (indexOfProduct == 4) {
                product15.printEquipment();
            } else {
                cout << "\nIn March, there were no tests of the specified product in Laboratory 4!";
            }
        } else if (indexOfMonth == 3) {
            cout << "\nIn April, there were no tests of the products in Laboratory 4!";
        } else if (indexOfMonth == 4) {
            cout << "\nIn May, there were no tests of the products in Laboratory 4!";
        } else if (indexOfMonth == 5) {
            cout << "\nIn June, there were no tests of the products in Laboratory 4!";
        } else {
            cout << "The entered index is incorrect!";
        }
    }
    break;

case 5:
    while (true) {
        int indexOfMonth;
        cout << "\n\nEnter the month number (from 0 to 5) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
        cin >> indexOfMonth;
        cout << "\nEnter the product number (from 1 to 8) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
        int indexOfProduct;
        cin >> indexOfProduct;
        if (indexOfMonth == -1 && indexOfProduct == -1) {
            break;
            cout << endl;
        } else if (indexOfMonth == 0) {
            cout << "\nIn January, there were no tests of the products in Laboratory 5!";
        } else if (indexOfMonth == 1) {
            if (indexOfProduct == 1) {
                product6.printEquipment();
            } else if (indexOfProduct == 2) {
                product7.printEquipment();
            } else if (indexOfProduct == 3) {
                product8.printEquipment();
            } else if (indexOfProduct == 4) {
                product9.printEquipment();
            } else if (indexOfProduct == 5) {
                product10.printEquipment();
            } else if (indexOfProduct == 6) {
                product11.printEquipment();
            } else {
                cout << "\nIn February, there were no tests of the specified product in Laboratory 5!";
            }
        } else if (indexOfMonth == 2) {
            cout << "\nIn March, there were no tests of the products in Laboratory 5!";
        } else if (indexOfMonth == 3) {
            if (indexOfProduct == 1) {
                product16.printEquipment();
            } else if (indexOfProduct == 2) {
                product17.printEquipment();
            } else if (indexOfProduct == 3) {
                product18.printEquipment();
            } else if (indexOfProduct == 4) {
                product19.printEquipment();
            } else {
                cout << "\nIn April, there were no tests of the specified product in Laboratory 5!";
            }
        } else if (indexOfMonth == 4) {
            cout << "\nIn May, there were no tests of the products in Laboratory 5!";
        } else if (indexOfMonth == 5) {
            if (indexOfProduct == 1) {
                product23.printEquipment();
            } else if (indexOfProduct == 2) {
                product24.printEquipment();
            } else if (indexOfProduct == 3) {
                product25.printEquipment();
            } else if (indexOfProduct == 4) {
                product26.printEquipment();
            } else if (indexOfProduct == 5) {
                product27.printEquipment();
            } else if (indexOfProduct == 6) {
                product28.printEquipment();
            } else if (indexOfProduct == 7) {
                product29.printEquipment();
            } else if (indexOfProduct == 8) {
                product30.printEquipment();
            } else {
                cout << "\nIn June, there were no tests of the specified product in Laboratory 5!";
            }
        } else {
            cout << "The entered index is incorrect!";
        }
    }
    break;
    case 6:
    while (true) {
        int indexOfMonth;
        cout << "\n\nEnter the month number (from 0 to 5) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
        cin >> indexOfMonth;
        cout << "\nEnter the product number (from 1 to 8) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
        int indexOfProduct;
        cin >> indexOfProduct;
        if (indexOfMonth == -1 && indexOfProduct == -1) {
            break;
            cout << endl;
        } else if (indexOfMonth == 0) {
            if (indexOfProduct == 1) {
                product1.printEquipment();
            } else if (indexOfProduct == 2) {
                product2.printEquipment();
            } else if (indexOfProduct == 3) {
                product3.printEquipment();
            } else if (indexOfProduct == 4) {
                product4.printEquipment();
            } else if (indexOfProduct == 5) {
                product5.printEquipment();
            } else {
                cout << "\nIn January, there were no tests of the specified product in Laboratory 6!";
            }
        } else if (indexOfMonth == 1) {
            cout << "\nIn February, there were no tests of the products in Laboratory 6!";
        } else if (indexOfMonth == 2) {
            if (indexOfProduct == 1) {
                product12.printEquipment();
            } else if (indexOfProduct == 2) {
                product13.printEquipment();
            } else if (indexOfProduct == 3) {
                product14.printEquipment();
            } else if (indexOfProduct == 4) {
                product15.printEquipment();
            } else {
                cout << "\nIn March, there were no tests of the specified product in Laboratory 6!";
            }
        } else if (indexOfMonth == 3) {
            if (indexOfProduct == 1) {
                product16.printEquipment();
            } else if (indexOfProduct == 2) {
                product17.printEquipment();
            } else if (indexOfProduct == 3) {
                product18.printEquipment();
            } else if (indexOfProduct == 4) {
                product19.printEquipment();
            } else {
                cout << "\nIn April, there were no tests of the specified product in Laboratory 6!";
            }
        } else if (indexOfMonth == 4) {
            cout << "\nIn May, there were no tests of the products in Laboratory 6!";
        } else if (indexOfMonth == 5) {
            cout << "\nIn June, there were no tests of the products in Laboratory 6!";
        } else {
            cout << "The entered index is incorrect!";
        }
    }
    break;
    case 7:
       while (true) {
    int index;
    cout << "\n\nEnter the month number (from 1 to 6) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    cin >> index;
    cout << "\nEnter a category number (from 1 to 6) to get the category, products in the category, and a list of testers participating in testing the specified category during a specified time period, or enter -1 to exit:";
    int indexOfCategory;
    cin >> indexOfCategory;
    if (index == -1 && indexOfCategory == -1) {
        break;
        cout << endl;
    } else if (index == 1) {
        if (indexOfCategory == 1){
        categoryy1.printEquipment();
        }
        else {
            cout << "\nNo tests of the specified category were conducted in January";
        }
    } else if (index == 2) {
        if (indexOfCategory == 2){
            cout << "\nNo tests of the specified category were conducted in February";
        }
    } else if (index == 3) {
        cout << "\nNo tests of the specified category were conducted in March";
    } else if (index == 4) {
        cout << "\nNo tests of the specified category were conducted in April";
    } else if (index == 5) {
        if (indexOfCategory == 5){
        categoryy5.printEquipment();
        }
        else {
            cout << "\nNo tests of the specified category were conducted in May";
        }
   } else if (index == 6) {
         cout << "\nNo tests of the specified category were conducted in June";
    }
    else {
        cout << "The entered index is incorrect!";
   }
}
    break;
    case 8:
       while (true) {
    int index;
    cout << "\n\nEnter the month number (from 1 to 6) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    cin >> index;
    cout << "\nEnter a category number (from 1 to 6) to get the category, products in the category, and a list of testers participating in testing the specified category during a specified time period, or enter -1 to exit:";
    int indexOfCategory;
    cin >> indexOfCategory;
    if (index == -1 && indexOfCategory == -1) {
        break;
        cout << endl;
    } else if (index == 1) {
            cout << "\nNo tests of the specified category were conducted in January";
    } else if (index == 2) {
            if (indexOfCategory == 2){
                categoryy2.printEquipment();
            }
            else {
            cout << "\nNo tests of the specified category were conducted in February";
            }
    } else if (index == 3) {
        cout << "\nNo tests of the specified category were conducted in March";
    } else if (index == 4) {
        cout << "\nNo tests of the specified category were conducted in April";
    } else if (index == 5) {
            cout << "\nNo tests of the specified category were conducted in May";
   } else if (index == 6) {
         if (indexOfCategory == 6){
                categoryy6.printEquipment();
            }
            else {
            cout << "\nNo tests of the specified category were conducted in June";
            }
    }
    else {
        cout << "The entered index is incorrect!";
   }
}
    break;
    case 9:
       while (true) {
    int index;
    cout << "\n\nEnter the month number (from 1 to 6) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    cin >> index;
    cout << "\nEnter a category number (from 1 to 6) to get the category, products in the category, and a list of testers participating in testing the specified category during a specified time period, or enter -1 to exit:";
    int indexOfCategory;
    cin >> indexOfCategory;
    if (index == -1 && indexOfCategory == -1) {
        break;
        cout << endl;
    } else if (index == 1) {
            cout << "\nNo tests of the specified category were conducted in January";
    } else if (index == 2) {
            if (indexOfCategory == 2){
                categoryy2.printEquipment();
            }
            else {
            cout << "\nNo tests of the specified category were conducted in February";
            }
    } else if (index == 3) {
        cout << "\nNo tests of the specified category were conducted in March";
    } else if (index == 4) {
        cout << "\nNo tests of the specified category were conducted in April";
    } else if (index == 5) {
            if (indexOfCategory == 5){
                categoryy5.printEquipment();
            }
            else {
            cout << "\nNo tests of the specified category were conducted in May";
            }
   } else if (index == 6) {
            cout << "\nNo tests of the specified category were conducted in June";
    }
    else {
        cout << "The entered index is incorrect!";
   }
}
    break;
    case 10:
       while (true) {
    int index;
    cout << "\n\nEnter the month number (from 1 to 6) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    cin >> index;
    cout << "\nEnter a category number (from 1 to 6) to get the category, products in the category, and a list of testers participating in testing the specified category during a specified time period, or enter -1 to exit:";
    int indexOfCategory;
    cin >> indexOfCategory;
    if (index == -1 && indexOfCategory == -1) {
        break;
        cout << endl;
    } else if (index == 1) {
            cout << "\nNo tests of the specified category were conducted in January";
    } else if (index == 2) {
            cout << "\nNo tests of the specified category were conducted in February";
    } else if (index == 3) {
        if (indexOfCategory == 3){
                categoryy3.printEquipment();
            }
            else {
            cout << "\nNo tests of the specified category were conducted in March";
            }
    } else if (index == 4) {
        cout << "\nNo tests of the specified category were conducted in April";
    } else if (index == 5) {
            cout << "\nNo tests of the specified category were conducted in May";
   } else if (index == 6) {
            cout << "\nNo tests of the specified category were conducted in June";
    }
    else {
        cout << "The entered index is incorrect!";
   }
}
    break;
    case 11:
       while (true) {
    int index;
    cout << "\n\nEnter the month number (from 1 to 6) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    cin >> index;
    cout << "\nEnter a category number (from 1 to 6) to get the category, products in the category, and a list of testers participating in testing the specified category during a specified time period, or enter -1 to exit:";
    int indexOfCategory;
    cin >> indexOfCategory;
    if (index == -1 && indexOfCategory == -1) {
        break;
        cout << endl;
    } else if (index == 1) {
            cout << "\nNo tests of the specified category were conducted in January";
    } else if (index == 2) {
             if (indexOfCategory == 2){
                categoryy2.printEquipment();
            }
            else {
            cout << "\nNo tests of the specified category were conducted in February";
            }
    } else if (index == 3) {
            cout << "\nNo tests of the specified category were conducted in March";
    } else if (index == 4) {
        if (indexOfCategory == 4){
                categoryy4.printEquipment();
            }
            else {
            cout << "\nNo tests of the specified category were conducted in April";
            }
    } else if (index == 5) {
            cout << "\nNo tests of the specified category were conducted in May";
   } else if (index == 6) {
            if (indexOfCategory == 6){
                categoryy6.printEquipment();
            }
            else {
            cout << "\nNo tests of the specified category were conducted in June";
            }
    }
    else {
        cout << "The entered index is incorrect!";
   }
}
    break;
    case 12:
       while (true) {
    int index;
    cout << "\n\nEnter the month number (from 1 to 6) to get the product and list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    cin >> index;
    cout << "\nEnter a category number (from 1 to 6) to get the category, products in the category, and a list of testers participating in testing the specified category during a specified time period, or enter -1 to exit:";
    int indexOfCategory;
    cin >> indexOfCategory;
    if (index == -1 && indexOfCategory == -1) {
        break;
        cout << endl;
    } else if (index == 1) {
            if (indexOfCategory == 1){
                categoryy1.printEquipment();
            }
            else {
            cout << "\nNo tests of the specified category were conducted in January";
            }
    } else if (index == 2) {
            cout << "\nNo tests of the specified category were conducted in February";
    } else if (index == 3) {
            cout << "\nNo tests of the specified category were conducted in March";
    } else if (index == 4) {
             if (indexOfCategory == 4){
                categoryy4.printEquipment();
            }
            else {
            cout << "\nNo tests of the specified category were conducted in April";
            }
    } else if (index == 5) {
            cout << "\nNo tests of the specified category were conducted in May";
   } else if (index == 6) {
            cout << "\nNo tests of the specified category were conducted in June";
    }
    else {
        cout << "The entered index is incorrect!";
   }
}
    break;
    case 13:
       while (true) {
    int index;
    cout << "\n\nEnter the month number (from 1 to 6) to get the list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    cin >> index;
    if (index == -1) {
        break;
        cout << endl;
    } else if (index == 1) {
                categoryy1.printEquipment();
    } else if (index == 2) {
            cout << "\nNo tests were conducted in February";
    } else if (index == 3) {
            cout << "\nNo tests were conducted in March";
    } else if (index == 4) {
                categoryy4.printEquipment();
    } else if (index == 5) {
            cout << "\nNo tests were conducted in May";
   } else if (index == 6) {
            cout << "\nNo tests were conducted in June";
    }
    else {
        cout << "The entered index is incorrect!";
   }
}
    break;
    case 14:
       while (true) {
    int index;
    cout << "\n\nEnter the month number (from 1 to 6) to get the list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    cin >> index;
    if (index == -1) {
        break;
        cout << endl;
    } else if (index == 1) {
                cout << "\nNo tests were conducted in January";
    } else if (index == 2) {
        categoryy2.printEquipment();
    } else if (index == 3) {
            cout << "\nNo tests were conducted in March";
    } else if (index == 4) {
                cout << "\nNo tests were conducted in April";
    } else if (index == 5) {
            cout << "\nNo tests were conducted in May";
   } else if (index == 6) {
            categoryy6.printEquipment();
    }
    else {
        cout << "The entered index is incorrect!";
   }
}
    break;
    case 15:
       while (true) {
    int index;
    cout << "\n\nEnter the month number (from 1 to 6) to get the list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    cin >> index;
    if (index == -1) {
        break;
        cout << endl;
    } else if (index == 1) {
                cout << "\nNo tests were conducted in January";
    } else if (index == 2) {
        categoryy2.printEquipment();
    } else if (index == 3) {
            cout << "\nNo tests were conducted in March";
    } else if (index == 4) {
                cout << "\nNo tests were conducted in April";
    } else if (index == 5) {
        categoryy5.printEquipment();
   } else if (index == 6) {
        cout << "\nNo tests were conducted in June";
    }
    else {
        cout << "The entered index is incorrect!";
   }
}
    break;
    case 16:
       while (true) {
    int index;
    cout << "\n\nEnter the month number (from 1 to 6) to get the list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    cin >> index;
    if (index == -1) {
        break;
        cout << endl;
    } else if (index == 1) {
                cout << "\nNo tests were conducted in January";
    } else if (index == 2) {
        cout << "\nNo tests were conducted in February";
    } else if (index == 3) {
            categoryy3.printEquipment();
    } else if (index == 4) {
                cout << "\nNo tests were conducted in April";
    } else if (index == 5) {
        cout << "\nNo tests were conducted in May";
   } else if (index == 6) {
        cout << "\nNo tests were conducted in June";
    }
    else {
        cout << "The entered index is incorrect!";
   }
}
    break;
    case 17:
       while (true) {
    int index;
    cout << "\n\nEnter the month number (from 1 to 6) to get the list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    cin >> index;
    if (index == -1) {
        break;
        cout << endl;
    } else if (index == 1) {
                cout << "\nNo tests were conducted in January";
    } else if (index == 2) {
        categoryy2.printEquipment();
    } else if (index == 3) {
            cout << "\nNo tests were conducted in March";
    } else if (index == 4) {
                categoryy4.printEquipment();
    } else if (index == 5) {
        cout << "\nNo tests were conducted in May";
   } else if (index == 6) {
            categoryy6.printEquipment();
    }
    else {
        cout << "The entered index is incorrect!";
   }
}
    break;
    case 18:
       while (true) {
    int index;
    cout << "\n\nEnter the month number (from 1 to 6) to get the list of testers participating in the testing of the specified product during a certain period of time, or enter -1 to exit: ";
    cin >> index;
    if (index == -1) {
        break;
        cout << endl;
    } else if (index == 1) {
                categoryy2.printEquipment();
    } else if (index == 2) {
        cout << "\nNo tests were conducted in February";
    } else if (index == 3) {
            cout << "\nNo tests were conducted in March";
    } else if (index == 4) {
                categoryy4.printEquipment();
    } else if (index == 5) {
        cout << "\nNo tests were conducted in May";
   } else if (index == 6) {
            cout << "\nNo tests were conducted in June";
    }
    else {
        cout << "The entered index is incorrect!";
   }
}
    break;
    }
    }while (choice5 != 19);
    delete equipment1; delete equipment2; delete equipment3; delete equipment4; delete equipment5; delete equipment6; delete equipment7; delete equipment8; delete equipment9;
    delete equipment10; delete equipment11; delete equipment12; delete equipment13; delete equipment14; delete equipment15; delete equipment16; delete equipment17;
    delete equipment18; delete equipment19; delete equipment20; delete equipment21; delete equipment22; delete equipment23; delete equipment24; delete equipment25;
    delete equipment26; delete equipment27; delete equipment28; delete equipment29; delete equipment30; delete equipment31; delete equipment32; delete equipment33; delete equipment34;
    delete equipment35; delete equipment36; delete equipment37; delete equipment38;
continue;
}
else if(mainChoice == 13){
Region regionn1("Region 1");
    regionn1.addProduct2(Product("Volvo"));
    regionn1.addProduct2(Product("Man"));
    Region regionn2("Region 2");
    regionn2.addProduct2(Product("Ford"));
    regionn2.addProduct2(Product("Dodge"));
    Region regionn3("Region 3");
    regionn3.addProduct2(Product("Mercedes-Benz"));
    regionn3.addProduct2(Product("Isuzu"));
    Region regionn4("Region 4");
    regionn4.addProduct2(Product("Challenger"));
    regionn4.addProduct2(Product("Kubota"));
    Region regionn5("Region 5");
    regionn5.addProduct2(Product("Caterpillar"));
    regionn5.addProduct2(Product("Liebherr"));
    Region regionn6("Region 6");
    regionn6.addProduct2(Product("Lifan"));
    regionn6.addProduct2(Product("Yamaha"));
    Departament departamentt1("Department 1", { regionn1, regionn2 });
    Departament departamentt2("Department 2", { regionn3, regionn4 });
    Departament departamentt3("Department 3", { regionn5, regionn6 });
    Factory factoryy;
    factoryy.departamentss = { departamentt1, departamentt2, departamentt3 };
     cout << endl << endl;
    int choice6;
    do {
        cout << "\nChoose an option:\n";
        cout << "1. The number and list of products of the specified category, which are assembled by the specified department at this moment\n";
        cout << "2. The number and list of products in general, which are assembled by the specified department at this moment\n";
        cout << "3. The number and list of products of a separate category that are collected by the specified region at this moment\n";
        cout << "4. The number and list of products in general, which are collected by the specified region at this moment\n";
        cout << "5. The number and list of products of a separate category that are being collected by the factory at this moment\n";
        cout << "6. The number and list of products in general, which are being collected by the enterprise at the present time\n";
        cout << "7. Exit the program\n";
        cin >> choice6;
switch (choice6) {
case 1:
    while(true){
    int indexOfDepartmentt;
    cout << "\nEnter the department index (1 to 3): ";
    cin >> indexOfDepartmentt;
    if(indexOfDepartmentt == -1){
        break;
    }
    else if(indexOfDepartmentt == 1){
    int categoryIndex = 0;
    cout << "Enter the category index (0 or 1): ";
    cin >> categoryIndex;
    if (categoryIndex == 0) {
        const Departament& departmentt = factoryy.departamentss[0];
        const vector<Product>& regionProducts = departmentt.regions[0].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProducts);
        printCount(regionProducts);
    } else if (categoryIndex == 1) {
        const Departament& departmentt = factoryy.departamentss[0];
        const vector<Product>& regionProducts = departmentt.regions[1].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProducts);
        printCount(regionProducts);
    } else {
        cout << "Invalid category index." << endl;
    }
    }
    else if(indexOfDepartmentt == 2){
    int categoryIndex = 0;
    cout << "Enter the category index (0 or 1): ";
    cin >> categoryIndex;
    if (categoryIndex == 0) {
        const Departament& departmentt = factoryy.departamentss[1];
        const vector<Product>& regionProducts = departmentt.regions[0].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProducts);
        printCount(regionProducts);
    } else if (categoryIndex == 1) {
        const Departament& departmentt = factoryy.departamentss[1];
        const vector<Product>& regionProducts = departmentt.regions[1].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProducts);
        printCount(regionProducts);
    } else {
        cout << "Invalid category index." << endl;
    }
    } else if(indexOfDepartmentt == 3){
        int categoryIndex = 0;
    cout << "Enter the category index (0 or 1): ";
    cin >> categoryIndex;
    if (categoryIndex == 0) {
        const Departament& departmentt = factoryy.departamentss[2];
        const vector<Product>& regionProducts = departmentt.regions[0].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProducts);
        printCount(regionProducts);
    } else if (categoryIndex == 1) {
        const Departament& departmentt = factoryy.departamentss[2];
        const vector<Product>& regionProducts = departmentt.regions[1].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProducts);
        printCount(regionProducts);
    } else {
        cout << "Invalid category index." << endl;
    }
    } else{
        cout << "\nInvalid index of department!";
    }
    }
    break;
case 2:
    while(true){
    int indexOfDepartmentt;
    cout << "\nEnter the department index (1 to 3): ";
    cin >> indexOfDepartmentt;
    if(indexOfDepartmentt == -1){
        break;
    }
    else if (indexOfDepartmentt >= 1 && indexOfDepartmentt <= 3) {
    const Departament& departmentt = factoryy.departamentss[indexOfDepartmentt - 1];
        const vector<Product>& regionProducts = departmentt.regions[0].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProducts);
        const vector<Product>& regionProductss = departmentt.regions[1].getProducts();
        printProductss(regionProductss);
        printCountInGeneral(regionProducts);
    } else {
        cout << "Invalid department index!" << endl;
    }
    }
    break;
case 3:
    while(true){
    int indexOfRegion;
    cout << "\nEnter the region index (1 to 6): ";
    cin >> indexOfRegion;
    if(indexOfRegion == -1){
        break;
    }
    else if(indexOfRegion == 1){
    int categoryIndex = 0;
    cout << "Enter the category index (0): ";
    cin >> categoryIndex;
    if (categoryIndex == 0) {
        const Departament& departmentt = factoryy.departamentss[0];
        const vector<Product>& regionProducts = departmentt.regions[0].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProducts);
        printCount(regionProducts);
    } else {
        cout << "Invalid category index." << endl;
    }
    }
    else if(indexOfRegion == 2){
    int categoryIndex = 0;
    cout << "Enter the category index (0): ";
    cin >> categoryIndex;
    if (categoryIndex == 0) {
        const Departament& departmentt = factoryy.departamentss[0];
        const vector<Product>& regionProducts = departmentt.regions[1].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProducts);
        printCount(regionProducts);
    }
    } else if(indexOfRegion == 3){
        int categoryIndex = 0;
    cout << "Enter the category index (0): ";
    cin >> categoryIndex;
    if (categoryIndex == 0) {
        const Departament& departmentt = factoryy.departamentss[1];
        const vector<Product>& regionProducts = departmentt.regions[0].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProducts);
        printCount(regionProducts);
    }
    } else if(indexOfRegion == 4){
        int categoryIndex = 0;
    cout << "Enter the category index (0): ";
    cin >> categoryIndex;
    if (categoryIndex == 0) {
        const Departament& departmentt = factoryy.departamentss[1];
        const vector<Product>& regionProducts = departmentt.regions[1].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProducts);
        printCount(regionProducts);
    }
    } else if(indexOfRegion == 5){
        int categoryIndex = 0;
    cout << "Enter the category index (0): ";
    cin >> categoryIndex;
    if (categoryIndex == 0) {
        const Departament& departmentt = factoryy.departamentss[2];
        const vector<Product>& regionProducts = departmentt.regions[0].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProducts);
        printCount(regionProducts);
    }
    } else if(indexOfRegion == 6){
        int categoryIndex = 0;
    cout << "Enter the category index (0): ";
    cin >> categoryIndex;
    if (categoryIndex == 0) {
        const Departament& departmentt = factoryy.departamentss[2];
        const vector<Product>& regionProducts = departmentt.regions[1].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProducts);
        printCount(regionProducts);
    }
    } else{
        cout << "\nInvalid index of region!";
    }
    }
    break;
case 4:
    while(true){
    int indexOfRegion;
    cout << "\nEnter the region index (1 to 6): ";
    cin >> indexOfRegion;
    if(indexOfRegion == -1){
        break;
    }
    else if(indexOfRegion == 1){
        const Departament& departmentt = factoryy.departamentss[0];
        const vector<Product>& regionProducts = departmentt.regions[0].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProducts);
        printCount(regionProducts);
    }
    else if(indexOfRegion == 2){
        const Departament& departmentt = factoryy.departamentss[0];
        const vector<Product>& regionProducts = departmentt.regions[1].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProducts);
        printCount(regionProducts);
    } else if(indexOfRegion == 3){
        const Departament& departmentt = factoryy.departamentss[1];
        const vector<Product>& regionProducts = departmentt.regions[0].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProducts);
        printCount(regionProducts);
    } else if(indexOfRegion == 4){
        const Departament& departmentt = factoryy.departamentss[1];
        const vector<Product>& regionProducts = departmentt.regions[1].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProducts);
        printCount(regionProducts);
    } else if(indexOfRegion == 5){
        const Departament& departmentt = factoryy.departamentss[2];
        const vector<Product>& regionProducts = departmentt.regions[0].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProducts);
        printCount(regionProducts);
    } else if(indexOfRegion == 6){
        const Departament& departmentt = factoryy.departamentss[2];
        const vector<Product>& regionProducts = departmentt.regions[1].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProducts);
        printCount(regionProducts);
    } else{
        cout << "\nInvalid index of region!";
    }
    }
    break;
case 5:
    while(true){
    int indexOfFactory;
    cout << "\nEnter 0 to continue or -1 to exit: ";
    cin >> indexOfFactory;
    if(indexOfFactory == -1){
        break;
    }
    else if(indexOfFactory < -1 || indexOfFactory > 0){
        cout << "Invalide index!\n";
        break;
    }
    int categoryIndex = 0;
    cout << "Enter the category index (0 or 5): ";
    cin >> categoryIndex;
    if (categoryIndex == 0) {
        const Departament& departmentt = factoryy.departamentss[0];
        const vector<Product>& regionProducts = departmentt.regions[0].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProducts);
        printCount(regionProducts);
    } else if (categoryIndex == 1) {
        const Departament& departmentt = factoryy.departamentss[0];
        const vector<Product>& regionProducts = departmentt.regions[1].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProducts);
        printCount(regionProducts);
    } else if (categoryIndex == 2) {
        const Departament& departmentt = factoryy.departamentss[1];
        const vector<Product>& regionProducts = departmentt.regions[0].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProducts);
        printCount(regionProducts);
    } else if (categoryIndex == 3) {
        const Departament& departmentt = factoryy.departamentss[1];
        const vector<Product>& regionProducts = departmentt.regions[1].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProducts);
        printCount(regionProducts);
    } else if (categoryIndex == 4) {
        const Departament& departmentt = factoryy.departamentss[2];
        const vector<Product>& regionProducts = departmentt.regions[0].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProducts);
        printCount(regionProducts);
    } else if (categoryIndex == 5) {
        const Departament& departmentt = factoryy.departamentss[2];
        const vector<Product>& regionProducts = departmentt.regions[1].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProducts);
        printCount(regionProducts);
    } else {
        cout << "Invalid category index." << endl;
    }
    }
    break;
case 6:
    while(true){
    int indexOfFactory;
    cout << "\nEnter 0 to continue or -1 to exit: ";
    cin >> indexOfFactory;
    if(indexOfFactory == -1){
        break;
    }
    else if(indexOfFactory < -1 || indexOfFactory > 0){
        cout << "Invalide index!\n";
        break;
    }
        const Departament& departmentt1 = factoryy.departamentss[0];
        const vector<Product>& regionProductss1 = departmentt1.regions[0].getProducts();
        cout << "Products:" << endl;
        printProductss(regionProductss1);
        const Departament& departmentt2 = factoryy.departamentss[0];
        const vector<Product>& regionProductss2 = departmentt2.regions[1].getProducts();
        printProductss(regionProductss2);
        const Departament& departmentt3 = factoryy.departamentss[1];
        const vector<Product>& regionProductss3 = departmentt3.regions[0].getProducts();
        printProductss(regionProductss3);
        const Departament& departmentt4 = factoryy.departamentss[1];
        const vector<Product>& regionProductss4 = departmentt4.regions[1].getProducts();
        printProductss(regionProductss4);
        const Departament& departmentt5 = factoryy.departamentss[2];
        const vector<Product>& regionProductss5 = departmentt5.regions[0].getProducts();
        printProductss(regionProductss5);
        const Departament& departmentt6 = factoryy.departamentss[2];
        const vector<Product>& regionProductss6 = departmentt6.regions[1].getProducts();
        printProductss(regionProductss6);
        printCountInGeneralForFactory(regionProductss6);
    }
    break;
    }
    } while (choice6 != 7);
    continue;
}
else{
    cout << "Invalid index. Try again!";
}
    }
    return 0;
}



